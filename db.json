{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/feibar.jpg","path":"medias/avatars/feibar.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ajin.jpg","path":"medias/avatars/ajin.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","path":"medias/avatars/liyangzone.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/masterx.jpg","path":"medias/avatars/masterx.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","path":"medias/avatars/sunchangzhi.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taotao.jpg","path":"medias/avatars/taotao.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/tawn.jpg","path":"medias/avatars/tawn.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/yezijie.png","path":"medias/avatars/yezijie.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jiejie.jpg","path":"medias/avatars/jiejie.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","path":"medias/avatars/milyyy.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xiejiadong.jpg","path":"medias/avatars/xiejiadong.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","path":"medias/music/avatars/tiantangdemogui.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/contact.jpg","path":"medias/contact.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lzh.png","path":"medias/avatars/lzh.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/0xbird.png","path":"medias/avatars/0xbird.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","path":"medias/avatars/mashiro.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/28.jpg","path":"medias/featureimages/28.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/feibar.png","path":"medias/avatars/feibar.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","path":"medias/avatars/jitao.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","path":"medias/music/avatars/daoshu.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1586054623000},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1586054623000},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1586054623000},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1586054623000},{"_id":"source/CNAME","hash":"29b644dd11bee379df4111a68b7904c52ee191eb","modified":1587433474742},{"_id":"source/.DS_Store","hash":"2909745bb53eb48ad1da54cbe155666306d0ceca","modified":1587634080234},{"_id":"themes/matery/_config.yml","hash":"1858e55a1c2ae131271b54f8ed9bbced4ca0a3a8","modified":1587451133669},{"_id":"source/CNAME.md","hash":"29b644dd11bee379df4111a68b7904c52ee191eb","modified":1587433474742},{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1586054623000},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1586054623000},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1586054623000},{"_id":"themes/matery/layout/friends.ejs","hash":"895e40a864796680fbef581e4b09f252fbdd963a","modified":1586054623000},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1586054623000},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1586054623000},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1586054623000},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1586054623000},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1586054623000},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1586054623000},{"_id":"themes/matery/layout/post.ejs","hash":"69d4ae45bccb4e923d6f32185953ae679314b21d","modified":1587451329189},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1586054623000},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1586054623000},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1586054623000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1586054623000},{"_id":"source/_data/friends.json","hash":"6f330c0cdbfbe4e50a45527413c798defcef80d1","modified":1586054623000},{"_id":"source/about/index.md","hash":"5a083220f3c0b9d08fc63230791e2a6010d43ec7","modified":1586054623000},{"_id":"source/_data/musics.json","hash":"32bc061f34721b4ff55f880de1d0ec5787acd2f9","modified":1586054623000},{"_id":"themes/matery/source/favicon.png","hash":"0f4145b9a712f9662e4fae1b0086ce74cf1f9fc4","modified":1586054623000},{"_id":"source/_posts/.DS_Store","hash":"899cef48b3e9d0bd638bcb54a860cbe037b8cf09","modified":1588069647918},{"_id":"source/_posts/1.将Debug Information Format改为DWARF.md","hash":"d0d8faebabdb8a6af1780bb53ae55d50bdae0274","modified":1586941718360},{"_id":"source/_posts/click-the-area-around-the-prompt-view-to-hide-the-promot-view.md","hash":"35e19b900676a1a93d86179078506132ca6a483a","modified":1587634129179},{"_id":"source/_posts/github私有库开发.md","hash":"0ec2df7d9a83b910d6e614fc4566865452165bea","modified":1587451979669},{"_id":"source/_posts/KVO.md","hash":"1d257bd8c4a6008e2a73a5aa06327d71f3d18236","modified":1587714127825},{"_id":"source/_posts/hexo-use.md","hash":"9311008b09a9a9138f283fe9718fe764842e3275","modified":1587433230948},{"_id":"source/_posts/sort-algorithms.md","hash":"e59c0afb4170b475a29d14455cf2af9afa2819ee","modified":1586054623000},{"_id":"source/_posts/学习资料链接.md","hash":"2fc9d0d184da95ed61ee6341039adbb5037bcdf1","modified":1587454097292},{"_id":"source/_posts/hexo添加图片，网页首页正常浏览，结合typora，实现复制图片，自动插入.md","hash":"3968926948ca36392387d4fa41075a20b2150630","modified":1588070975340},{"_id":"source/_posts/旋转数组的三种方法.md","hash":"a92d1ea9492c13c1829e47d49adcb45a73f69f34","modified":1587994574536},{"_id":"source/_posts/ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题.md","hash":"3a97d4b2b9e33594c4ef2bc23671c5b784c029ef","modified":1586855114950},{"_id":"source/_posts/解决google搜索引擎被劫持：Unable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net.md","hash":"6741044e2cb6470c1e8bd03e1edebf7446dae869","modified":1588069758519},{"_id":"source/friends/index.md","hash":"57abf1458b8ed769dbc1d0112bab61618c6603ea","modified":1587713509133},{"_id":"source/archives/index.md","hash":"30a0e3a59be650ae34d7bb86ac7da53e21e9cf5b","modified":1586054623000},{"_id":"source/categories/index.md","hash":"67687d3f908737f7c680f096b3e80d9412f23b0e","modified":1586054623000},{"_id":"source/tags/index.md","hash":"fe3d7ecc91b81b062a6a60c06859dc24b9d704ac","modified":1586054623000},{"_id":"source/contact/index.md","hash":"d4ad3c16a7516dabb9d8a3952f6f338f8ccfb2af","modified":1587713522016},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1586054623000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1586054623000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1586054623000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"6ae58a57b83a5999d0b6a737ec868f084d208f89","modified":1586054623000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1586054623000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1586054623000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1586054623000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1586054623000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1586054623000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1586054623000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1586054623000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1586054623000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1586054623000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"ab610754bf6aea844b5ae0802ed37c73b5f1dc9f","modified":1586054623000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1586054623000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1586054623000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1586054623000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1586054623000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1586054623000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1586054623000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"0208c72410620be3ab619d8b997bd5de1af71996","modified":1586054623000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1586054623000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1586054623000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1586054623000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1586054623000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1586054623000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1586054623000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1586054623000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"b0b23332d271c75649490bf135fddfc69ede94b7","modified":1587439577084},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1586054623000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1586054623000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1586054623000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1586054623000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1586054623000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1586054623000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1586054623000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1586054623000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1586054623000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1586054623000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"e2865b3003ec07892e9112692e7ec786ee926ae8","modified":1586054623000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1586054623000},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1586054623000},{"_id":"themes/matery/source/css/matery.css","hash":"0d345a72318fd7aadcb6fcaa6f3abac94b91001c","modified":1586054623000},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1586054623000},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1586054623000},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1586054623000},{"_id":"source/_posts/click-the-area-around-the-prompt-view-to-hide-the-promot-view/截屏2020-04-23 下午5.26.47-7634116.png","hash":"1e64186f3c83c784d44951d24322b1667378cde6","modified":1587634012939},{"_id":"source/_posts/KVO/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1587712822230},{"_id":"themes/matery/source/medias/logo.png","hash":"0f4145b9a712f9662e4fae1b0086ce74cf1f9fc4","modified":1586054623000},{"_id":"source/_posts/hexo添加图片，网页首页正常浏览，结合typora，实现复制图片，自动插入.assets/image-20200428182128636.png","hash":"9dc4f5a2e131c52fca3eb58faf49130afa12b7b0","modified":1588069288637},{"_id":"source/_posts/hexo添加图片，网页首页正常浏览，结合typora，实现复制图片，自动插入/image-20200428182128636.png","hash":"9dc4f5a2e131c52fca3eb58faf49130afa12b7b0","modified":1588069288637},{"_id":"source/_posts/sort-algorithms/1.png","hash":"cb9865eb782b293168e69406b212a0f3097b82a4","modified":1586054623000},{"_id":"source/_posts/ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题/截屏2020-04-14 下午3.25.46.png","hash":"0a297b7911eb20e364b8250fdd9c1fe351b239cf","modified":1586849150513},{"_id":"source/_posts/解决google搜索引擎被劫持：Unable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net/截屏2020-04-28 下午5.37.41-8066702.png","hash":"362aea48c3a8a2e2530280fc5bbd3630998a6214","modified":1588066666817},{"_id":"source/_posts/解决google搜索引擎被劫持：Unable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net/截屏2020-04-28 下午5.37.41.png","hash":"362aea48c3a8a2e2530280fc5bbd3630998a6214","modified":1588066666817},{"_id":"source/_posts/ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题/截屏2020-04-14 下午3.25.35.png","hash":"8f2220b193b61dffed6708c97f1ca5f7e9264851","modified":1586849527737},{"_id":"source/_posts/ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题/截屏2020-04-14 下午3.25.49.png","hash":"5c01631253667d709fb8362b12b39462b865e03a","modified":1586849665125},{"_id":"source/_posts/click-the-area-around-the-prompt-view-to-hide-the-promot-view/截屏2020-04-23 下午5.26.47.png","hash":"1e64186f3c83c784d44951d24322b1667378cde6","modified":1587634012939},{"_id":"source/_posts/解决google搜索引擎被劫持：Unable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net/截屏2020-04-28 下午5.37.49.png","hash":"219719610a858ebe5dad62705803951cf50f1270","modified":1588066673828},{"_id":"source/_posts/解决google搜索引擎被劫持：Unable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net.assets/截屏2020-04-28 下午5.37.49.png","hash":"219719610a858ebe5dad62705803951cf50f1270","modified":1588066673828},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1586054623000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1586054623000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1586054623000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1586054623000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1586054623000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1586054623000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1586054623000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1586054623000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1586054623000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1586054623000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1586054623000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1586054623000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1586054623000},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1586054623000},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1586054623000},{"_id":"themes/matery/source/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1586054623000},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1586054623000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1586054623000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1586054623000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1f8bbfbd625448b4b2a748b75636e456b826dcd3","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"c4cc724f4572a9bcede7443a4f4c0393d3073868","modified":1586054623000},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"61eb27bc4ec65f4f116d34740903fb5af75bf561","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/feibar.jpg","hash":"343f47cb5c83cd866a1c824cbe2a112d02516d06","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/ajin.jpg","hash":"76cb8e872472ff47a1b061c3bcff1c03f30c02b8","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/masterx.jpg","hash":"c9f7e83d895fa241cefd6e742f356106b35f1b89","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/taotao.jpg","hash":"e668254375ddd40a684ff4669c3421851bebd36e","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/tawn.jpg","hash":"68a1cbacbb2370912b000c9d8d2b16196c918a50","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/yezijie.png","hash":"8a53537eb69f749115e512b6da061e7f23cd04e5","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1586054623000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1586054623000},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1586054623000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"309f484b6e69e877de6a7fb847d66497d22bbd65","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1586054623000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"9bade255a1918cfb3c3bcefbbbc8f163bf2e19e3","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/jiejie.jpg","hash":"a52476e25bec2391674e77a889a89341fbb29791","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"992e0d803160d2ae867be5eb0032d324d1cedffb","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/xiejiadong.jpg","hash":"f1a31f89426bd4dccdaba2170f4fc701336702e1","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1586054623000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1586054623000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1586054623000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1586054623000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1586054623000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"d4db93afdff4ce889dd8271bcf9e80eb3c0bf866","modified":1586054623000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"4fcbc9dd8ec0316e9dd5bfd0caf86f1520b10b3f","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"d8cc7a730668943dcb0776cfa240a0cf76826363","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"1c1063c29f827cf52eeef7ca8dc2d7e4efa31a76","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1586054623000},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1586054623000},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1586054623000},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1586054623000},{"_id":"themes/matery/source/medias/contact.jpg","hash":"beb5230c645fce81cf1cdb8c046a92a1b31582cc","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"280fa1c6493d7fdccfc18bd486446bacd9afe623","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"c2892770fd5617418fd33d6f834879e05b2cdafd","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1586054623000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1586054623000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"a3cfdee2120195ab36b2fdd074d5558852e69297","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"6ddd1bcbb62a2d28c5be3b9acb7418849d60b2e7","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1586054623000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"d0668539783fc615f14178644e486a6befb90c0c","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/28.jpg","hash":"c73036359640a67a8b17db7ba0e968c088957ab8","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"ceb8e0c195a7fe7420334efa114e98cd0e1c6523","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/feibar.png","hash":"eceaefcbbca1bf49b582eaa649d311cf4fe69dd6","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"11a6de283124964370dbfaf0e74f2f1e9ac8394d","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"1d8863277d744e1a18a2778ac26041bda5b03a98","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ee598933707f8bb98ecbf36925f24e8a1c4bd2d6","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"7ea6f890cc59def8b1c9f393e4ae77cd16c79aad","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"bd400da9123424afe7ba6c839be9ad7697c1245b","modified":1586054623000},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"255aaa4375da855bd80b38cfcc253de892a9d4cf","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"2b30186c6d78ed76fa5f278be57290c1bd22c96a","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"a77810cc2224446f5d4e1a857a8d480f21e81f83","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"72bc68fb0673b84ab9f863d2979396cdc268a76c","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"698fc46e97428d73c9d4e3d254e88b9b66fb38cd","modified":1586054623000},{"_id":"source/_posts/KVO/171a512df9918245.jpg","hash":"68e94acc747f212c03878b0f12e4adc68a1f7c42","modified":1587712394825},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"66de48d963e7f221931e550b2442da0cd40cbaa8","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"c74ce6fa4eee122e147ec55532744f34a87ae2bf","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"c66a4e7a2e670b63759a091f9428ee7f971d7b56","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"84ba9cf61045de789426eeb6333910266ce29b8c","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"f1d720039d654d693c32150c06c78cfc3663b0b4","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"0801e96a2f4cbd14b2ad44547e5ffbb23822e751","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"f81e97edf705ab45b989b2b15d6a13c005ccaa32","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"aff885598033614639944c7559b4849f883e2b34","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"cd54b116609f5741cc7db0f7f49bf56ac356ddfb","modified":1586054623000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06afe32a867f7a6e861618e0b5ac9d93cd71d05","modified":1586054623000},{"_id":"public/baidusitemap.xml","hash":"9a21af397abcbe07e33642f4a520b88a37c6c287","modified":1591854299600},{"_id":"public/baidu_urls.txt","hash":"9381c024e0af4c122435b5f9eb2a11b106e9619f","modified":1591854299604},{"_id":"public/search.xml","hash":"cd6e24e69ff099e1bcad1c5b71778443967d6a5c","modified":1591854299907},{"_id":"public/sitemap.xml","hash":"0ad24814726b9dd5ecff4ab93fb6d4be7b95aa74","modified":1591854300027},{"_id":"public/atom.xml","hash":"d52467d5df8b0bf86bc53e269ba164b59853cf2c","modified":1591854300028},{"_id":"public/404.html","hash":"3d01b7b8be4917b9407780fa885c50e2ba6e1a33","modified":1591854300042},{"_id":"public/CNAME.html","hash":"0d65f6744bbebd61f5a490374b675b30f0e11335","modified":1591854300042},{"_id":"public/about/index.html","hash":"1062e356079220ca57137e51096a4e86397d32b2","modified":1591854300042},{"_id":"public/friends/index.html","hash":"8811343fffb402e3dac7cefe82936e45e79d9c7f","modified":1591854300043},{"_id":"public/archives/index.html","hash":"9d0c4b33cad67c166c01117bc8e85ce8f3882de7","modified":1591854300043},{"_id":"public/categories/index.html","hash":"5f2fcc9a4a46413b1316a0d354690920565c0dab","modified":1591854300043},{"_id":"public/tags/index.html","hash":"fb16c98008880aa8f480b4295ccae875c071b1e9","modified":1591854300043},{"_id":"public/contact/index.html","hash":"9c368497fc613b2f13a60664a06152f0f61fff11","modified":1591854300043},{"_id":"public/2020/04/28/hexo-tian-jia-tu-pian-wang-ye-shou-ye-zheng-chang-liu-lan-jie-he-typora-shi-xian-fu-zhi-tu-pian-zi-dong-cha-ru/index.html","hash":"c93c5963d475711b11c434fd74199ab8a235680d","modified":1591854300043},{"_id":"public/2020/04/28/jie-jue-google-sou-suo-yin-qing-bei-jie-chi-unable-to-change-default-search-engine-in-chrome-with-search6188182-a-akamaihd-net/index.html","hash":"79b027b2368a90db0768ef58f7d55a3dbbf7129b","modified":1591854300043},{"_id":"public/2020/04/26/xuan-zhuan-shu-zu-de-san-chong-fang-fa/index.html","hash":"6496f22ff6a012528783d8b6306084c322da7369","modified":1591854300044},{"_id":"public/2020/04/24/kvo/index.html","hash":"711488c91e567a3206f670ad502a5124ff7a40c1","modified":1591854300044},{"_id":"public/2020/04/23/click-the-area-around-the-prompt-view-to-hide-the-promot-view/index.html","hash":"d4684f2c3b91f79b239387e952350a9c82b7ddf2","modified":1591854300044},{"_id":"public/2020/04/21/xue-xi-zi-liao-lian-jie/index.html","hash":"abe15626d05d18825a34d999a464576e591935e6","modified":1591854300044},{"_id":"public/2020/04/21/github-si-you-ku-kai-fa/index.html","hash":"815b99c1d30f28b48723a43a69bef65c7e295118","modified":1591854300044},{"_id":"public/2020/04/21/hexo-use/index.html","hash":"55243d82be83b7acba2d0a5d38e627079613caae","modified":1591854300044},{"_id":"public/2020/04/15/1.jiang-debug-information-format-gai-wei-dwarf/index.html","hash":"7b15600f8c313a19dfe629a0b0abd272ebd702a6","modified":1591854300045},{"_id":"public/2020/04/14/ios-qi-dong-ye-launchscreen-she-zhi-quan-ping-chu-li-qi-dong-ye-xian-shi-zai-zhuang-tai-lan-de-xia-fang-wen-ti/index.html","hash":"aead8ae378347a1c61a101f791ef9604b23a2a34","modified":1591854300045},{"_id":"public/2020/02/16/sort-algorithms/index.html","hash":"43153c0dbb17bf7e02986ee428e489e8e6215b90","modified":1591854300045},{"_id":"public/archives/2020/index.html","hash":"9d3cf8d042c98d1a8ab2a84370d469807066ec5d","modified":1591854300045},{"_id":"public/archives/2020/02/index.html","hash":"ea3e3ad65fa6a207113033b10be8067ebc684b9c","modified":1591854300045},{"_id":"public/archives/2020/04/index.html","hash":"fca1b12dc9aeffb285d8aae80713d09f5642e816","modified":1591854300045},{"_id":"public/categories/编程算法/index.html","hash":"8ccace32d298f9829a78a47ece1e98b0edb561be","modified":1591854300045},{"_id":"public/index.html","hash":"66010c552c2d6d5bddab25d81e1a1c105c8d6aa9","modified":1591854300045},{"_id":"public/tags/leetcode/index.html","hash":"e3cdb9355123f9c03a49d5a9faf0d8bc76b55f42","modified":1591854300046},{"_id":"public/tags/算法/index.html","hash":"027f588c30e72ea8aa82717a63a25d763a80c13e","modified":1591854300046},{"_id":"public/CNAME","hash":"29b644dd11bee379df4111a68b7904c52ee191eb","modified":1591854300091},{"_id":"public/favicon.png","hash":"0f4145b9a712f9662e4fae1b0086ce74cf1f9fc4","modified":1591854300091},{"_id":"public/medias/logo.png","hash":"0f4145b9a712f9662e4fae1b0086ce74cf1f9fc4","modified":1591854300091},{"_id":"public/medias/reward/wechat.png","hash":"61eb27bc4ec65f4f116d34740903fb5af75bf561","modified":1591854300091},{"_id":"public/medias/featureimages/0.jpg","hash":"1f8bbfbd625448b4b2a748b75636e456b826dcd3","modified":1591854300091},{"_id":"public/medias/avatars/avatar.jpg","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1591854300091},{"_id":"public/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1591854300091},{"_id":"public/medias/avatars/ajin.jpg","hash":"76cb8e872472ff47a1b061c3bcff1c03f30c02b8","modified":1591854300091},{"_id":"public/medias/avatars/feibar.jpg","hash":"343f47cb5c83cd866a1c824cbe2a112d02516d06","modified":1591854300091},{"_id":"public/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1591854300091},{"_id":"public/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1591854300091},{"_id":"public/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1591854300092},{"_id":"public/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1591854300092},{"_id":"public/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1591854300092},{"_id":"public/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1591854300092},{"_id":"public/medias/featureimages/5.jpg","hash":"c4cc724f4572a9bcede7443a4f4c0393d3073868","modified":1591854300092},{"_id":"public/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1591854300092},{"_id":"public/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1591854300092},{"_id":"public/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1591854300092},{"_id":"public/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1591854300092},{"_id":"public/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1591854300092},{"_id":"public/medias/avatars/masterx.jpg","hash":"c9f7e83d895fa241cefd6e742f356106b35f1b89","modified":1591854300092},{"_id":"public/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1591854300093},{"_id":"public/medias/avatars/taotao.jpg","hash":"e668254375ddd40a684ff4669c3421851bebd36e","modified":1591854300093},{"_id":"public/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1591854300093},{"_id":"public/medias/avatars/tawn.jpg","hash":"68a1cbacbb2370912b000c9d8d2b16196c918a50","modified":1591854300093},{"_id":"public/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1591854300093},{"_id":"public/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1591854300093},{"_id":"public/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1591854300093},{"_id":"public/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1591854300093},{"_id":"public/medias/avatars/yezijie.png","hash":"8a53537eb69f749115e512b6da061e7f23cd04e5","modified":1591854300093},{"_id":"public/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1591854300093},{"_id":"public/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1591854300093},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1591854300094},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1591854300094},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1591854300094},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1591854300094},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1591854300094},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1591854300094},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1591854300094},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1591854300094},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1591854300094},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1591854300094},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1591854300094},{"_id":"public/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1591854300094},{"_id":"public/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1591854300094},{"_id":"public/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1591854300094},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1591854300094},{"_id":"public/2020/04/23/click-the-area-around-the-prompt-view-to-hide-the-promot-view/截屏2020-04-23 下午5.26.47.png","hash":"1e64186f3c83c784d44951d24322b1667378cde6","modified":1591854300114},{"_id":"public/2020/02/16/sort-algorithms/1.png","hash":"cb9865eb782b293168e69406b212a0f3097b82a4","modified":1591854300116},{"_id":"public/2020/04/23/click-the-area-around-the-prompt-view-to-hide-the-promot-view/截屏2020-04-23 下午5.26.47-7634116.png","hash":"1e64186f3c83c784d44951d24322b1667378cde6","modified":1591854300127},{"_id":"public/2020/04/14/ios-qi-dong-ye-launchscreen-she-zhi-quan-ping-chu-li-qi-dong-ye-xian-shi-zai-zhuang-tai-lan-de-xia-fang-wen-ti/截屏2020-04-14 下午3.25.35.png","hash":"8f2220b193b61dffed6708c97f1ca5f7e9264851","modified":1591854300127},{"_id":"public/2020/04/14/ios-qi-dong-ye-launchscreen-she-zhi-quan-ping-chu-li-qi-dong-ye-xian-shi-zai-zhuang-tai-lan-de-xia-fang-wen-ti/截屏2020-04-14 下午3.25.49.png","hash":"5c01631253667d709fb8362b12b39462b865e03a","modified":1591854300128},{"_id":"public/2020/04/28/hexo-tian-jia-tu-pian-wang-ye-shou-ye-zheng-chang-liu-lan-jie-he-typora-shi-xian-fu-zhi-tu-pian-zi-dong-cha-ru/image-20200428182128636.png","hash":"9dc4f5a2e131c52fca3eb58faf49130afa12b7b0","modified":1591854300128},{"_id":"public/2020/04/28/jie-jue-google-sou-suo-yin-qing-bei-jie-chi-unable-to-change-default-search-engine-in-chrome-with-search6188182-a-akamaihd-net/截屏2020-04-28 下午5.37.41-8066702.png","hash":"362aea48c3a8a2e2530280fc5bbd3630998a6214","modified":1591854300128},{"_id":"public/2020/04/14/ios-qi-dong-ye-launchscreen-she-zhi-quan-ping-chu-li-qi-dong-ye-xian-shi-zai-zhuang-tai-lan-de-xia-fang-wen-ti/截屏2020-04-14 下午3.25.46.png","hash":"0a297b7911eb20e364b8250fdd9c1fe351b239cf","modified":1591854300128},{"_id":"public/2020/04/28/jie-jue-google-sou-suo-yin-qing-bei-jie-chi-unable-to-change-default-search-engine-in-chrome-with-search6188182-a-akamaihd-net/截屏2020-04-28 下午5.37.41.png","hash":"362aea48c3a8a2e2530280fc5bbd3630998a6214","modified":1591854300128},{"_id":"public/css/prism-tomorrow.css","hash":"7efd268869bf07673639975ec764c9bdffd0fb04","modified":1591854300128},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1591854300128},{"_id":"public/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1591854300128},{"_id":"public/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1591854300128},{"_id":"public/medias/reward/alipay.jpg","hash":"9bade255a1918cfb3c3bcefbbbc8f163bf2e19e3","modified":1591854300128},{"_id":"public/medias/avatars/jiejie.jpg","hash":"a52476e25bec2391674e77a889a89341fbb29791","modified":1591854300128},{"_id":"public/medias/avatars/myzhihu.png","hash":"992e0d803160d2ae867be5eb0032d324d1cedffb","modified":1591854300129},{"_id":"public/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1591854300129},{"_id":"public/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1591854300130},{"_id":"public/medias/avatars/xiejiadong.jpg","hash":"f1a31f89426bd4dccdaba2170f4fc701336702e1","modified":1591854300130},{"_id":"public/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1591854300130},{"_id":"public/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1591854300131},{"_id":"public/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1591854300131},{"_id":"public/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1591854300131},{"_id":"public/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1591854300131},{"_id":"public/medias/banner/1.jpg","hash":"309f484b6e69e877de6a7fb847d66497d22bbd65","modified":1591854300131},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1591854300131},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1591854300150},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1591854300150},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1591854300151},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1591854300151},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1591854300151},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1591854300151},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1591854300152},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1591854300152},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1591854300152},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1591854300152},{"_id":"public/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1591854300152},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1591854300152},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1591854300152},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1591854300152},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1591854300152},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1591854300152},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1591854300152},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1591854300153},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1591854300153},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1591854300153},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1591854300153},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1591854300153},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1591854300153},{"_id":"public/css/matery.css","hash":"caa63c2c7908e45ebbbea0fbdc72d09b7b6d5b76","modified":1591854300153},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1591854300153},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1591854300153},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1591854300154},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1591854300154},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1591854300154},{"_id":"public/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1591854300154},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1591854300154},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1591854300154},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1591854300154},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1591854300154},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1591854300154},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1591854300154},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1591854300154},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1591854300154},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1591854300155},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1591854300155},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1591854300155},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1591854300155},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1591854300155},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1591854300155},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1591854300155},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1591854300155},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1591854300155},{"_id":"public/2020/04/28/jie-jue-google-sou-suo-yin-qing-bei-jie-chi-unable-to-change-default-search-engine-in-chrome-with-search6188182-a-akamaihd-net/截屏2020-04-28 下午5.37.49.png","hash":"219719610a858ebe5dad62705803951cf50f1270","modified":1591854300156},{"_id":"public/medias/banner/0.jpg","hash":"d4db93afdff4ce889dd8271bcf9e80eb3c0bf866","modified":1591854300156},{"_id":"public/medias/banner/6.jpg","hash":"4fcbc9dd8ec0316e9dd5bfd0caf86f1520b10b3f","modified":1591854300156},{"_id":"public/medias/featureimages/14.jpg","hash":"1c1063c29f827cf52eeef7ca8dc2d7e4efa31a76","modified":1591854300156},{"_id":"public/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1591854300156},{"_id":"public/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1591854300156},{"_id":"public/medias/banner/2.jpg","hash":"280fa1c6493d7fdccfc18bd486446bacd9afe623","modified":1591854300156},{"_id":"public/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1591854300156},{"_id":"public/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1591854300157},{"_id":"public/medias/featureimages/13.jpg","hash":"d8cc7a730668943dcb0776cfa240a0cf76826363","modified":1591854300157},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1591854300157},{"_id":"public/medias/featureimages/22.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1591854300173},{"_id":"public/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1591854300187},{"_id":"public/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1591854300188},{"_id":"public/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1591854300188},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1591854300192},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1591854300192},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1591854300200},{"_id":"public/medias/featureimages/12.jpg","hash":"c2892770fd5617418fd33d6f834879e05b2cdafd","modified":1591854300201},{"_id":"public/medias/avatars/feibar.png","hash":"eceaefcbbca1bf49b582eaa649d311cf4fe69dd6","modified":1591854300202},{"_id":"public/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1591854300202},{"_id":"public/medias/banner/4.jpg","hash":"a3cfdee2120195ab36b2fdd074d5558852e69297","modified":1591854300242},{"_id":"public/medias/contact.jpg","hash":"beb5230c645fce81cf1cdb8c046a92a1b31582cc","modified":1591854300243},{"_id":"public/medias/featureimages/25.jpg","hash":"d0668539783fc615f14178644e486a6befb90c0c","modified":1591854300243},{"_id":"public/medias/featureimages/23.jpg","hash":"ee598933707f8bb98ecbf36925f24e8a1c4bd2d6","modified":1591854300243},{"_id":"public/medias/featureimages/27.jpg","hash":"7ea6f890cc59def8b1c9f393e4ae77cd16c79aad","modified":1591854300244},{"_id":"public/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1591854300244},{"_id":"public/medias/banner/3.jpg","hash":"255aaa4375da855bd80b38cfcc253de892a9d4cf","modified":1591854300244},{"_id":"public/medias/banner/5.jpg","hash":"6ddd1bcbb62a2d28c5be3b9acb7418849d60b2e7","modified":1591854300265},{"_id":"public/medias/featureimages/17.jpg","hash":"11a6de283124964370dbfaf0e74f2f1e9ac8394d","modified":1591854300265},{"_id":"public/medias/featureimages/2.jpg","hash":"1d8863277d744e1a18a2778ac26041bda5b03a98","modified":1591854300266},{"_id":"public/medias/featureimages/7.jpg","hash":"bd400da9123424afe7ba6c839be9ad7697c1245b","modified":1591854300267},{"_id":"public/medias/featureimages/26.jpg","hash":"c66a4e7a2e670b63759a091f9428ee7f971d7b56","modified":1591854300267},{"_id":"public/medias/featureimages/6.jpg","hash":"698fc46e97428d73c9d4e3d254e88b9b66fb38cd","modified":1591854300285},{"_id":"public/medias/featureimages/10.jpg","hash":"66de48d963e7f221931e550b2442da0cd40cbaa8","modified":1591854300285},{"_id":"public/medias/featureimages/18.jpg","hash":"c74ce6fa4eee122e147ec55532744f34a87ae2bf","modified":1591854300286},{"_id":"public/medias/featureimages/20.jpg","hash":"84ba9cf61045de789426eeb6333910266ce29b8c","modified":1591854300297},{"_id":"public/medias/featureimages/16.jpg","hash":"0801e96a2f4cbd14b2ad44547e5ffbb23822e751","modified":1591854300298},{"_id":"public/medias/featureimages/19.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1591854300299},{"_id":"public/medias/featureimages/21.jpg","hash":"a77810cc2224446f5d4e1a857a8d480f21e81f83","modified":1591854300300},{"_id":"public/medias/featureimages/28.jpg","hash":"c73036359640a67a8b17db7ba0e968c088957ab8","modified":1591854300300},{"_id":"public/medias/featureimages/1.jpg","hash":"f1d720039d654d693c32150c06c78cfc3663b0b4","modified":1591854300360},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1591854300360},{"_id":"public/2020/04/24/kvo/171a512df9918245.jpg","hash":"68e94acc747f212c03878b0f12e4adc68a1f7c42","modified":1591854300361},{"_id":"public/medias/featureimages/3.jpg","hash":"ceb8e0c195a7fe7420334efa114e98cd0e1c6523","modified":1591854300362},{"_id":"public/medias/featureimages/11.jpg","hash":"2b30186c6d78ed76fa5f278be57290c1bd22c96a","modified":1591854300373},{"_id":"public/medias/featureimages/24.jpg","hash":"72bc68fb0673b84ab9f863d2979396cdc268a76c","modified":1591854300377},{"_id":"public/medias/featureimages/8.jpg","hash":"f81e97edf705ab45b989b2b15d6a13c005ccaa32","modified":1591854300384},{"_id":"public/medias/featureimages/15.jpg","hash":"aff885598033614639944c7559b4849f883e2b34","modified":1591854300392},{"_id":"public/medias/featureimages/9.jpg","hash":"cd54b116609f5741cc7db0f7f49bf56ac356ddfb","modified":1591854300396},{"_id":"public/medias/featureimages/4.jpg","hash":"e06afe32a867f7a6e861618e0b5ac9d93cd71d05","modified":1591854300398}],"Category":[{"name":"编程算法","_id":"ckbacy5ue000bnfayslrcvtq9"}],"Data":[{"_id":"friends","data":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}]},{"_id":"musics","data":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2020-04-05T02:43:43.000Z","path":"404.html","comments":1,"_id":"ckbacy5rv0000nfayowavttry","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"_content":"bolg.91youzhi.com","source":"CNAME.md","raw":"bolg.91youzhi.com","date":"2020-04-28T10:50:37.577Z","updated":"2020-04-21T01:44:34.742Z","path":"CNAME.html","title":"","comments":1,"layout":"page","_id":"ckbacy5rx0001nfay3lj36hgj","content":"<p>bolg.91youzhi.com</p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>bolg.91youzhi.com</p>\n"},{"title":"about","date":"2019-07-19T08:41:10.000Z","type":"about","layout":"about","_content":"\n\n## 教育经历\n* <b>硕士 计算机科学与技术</b>\n华东师范大学\n2018/06 - 现在\n* <b>本科 计算机科学与技术</b>\n华东师范大学\n2014/09 - 2018/06\n<b>综合排名专业第一</b>\n\n## 获得荣誉\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>特等奖学金</b>\n大三学年\n* <b>二等奖</b>\n蓝桥杯C++组（上海）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>国家奖学金</b>\n大一学年\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛\n\n## 联系方式\n* <b>电子邮箱</b>\ngodweiyang@gmail.com\ni@godweiyang.com\n792321264@qq.com\n* <b>地址</b>\n上海市普陀区中山北路3663号理科大楼B906，邮编200062\n* <b>QQ 技术交流群</b>\n864832264\n\n![](/medias/contact.jpg)","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-19 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n## 教育经历\n* <b>硕士 计算机科学与技术</b>\n华东师范大学\n2018/06 - 现在\n* <b>本科 计算机科学与技术</b>\n华东师范大学\n2014/09 - 2018/06\n<b>综合排名专业第一</b>\n\n## 获得荣誉\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>特等奖学金</b>\n大三学年\n* <b>二等奖</b>\n蓝桥杯C++组（上海）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>国家奖学金</b>\n大一学年\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛\n\n## 联系方式\n* <b>电子邮箱</b>\ngodweiyang@gmail.com\ni@godweiyang.com\n792321264@qq.com\n* <b>地址</b>\n上海市普陀区中山北路3663号理科大楼B906，邮编200062\n* <b>QQ 技术交流群</b>\n864832264\n\n![](/medias/contact.jpg)","updated":"2020-04-05T02:43:43.000Z","path":"about/index.html","comments":1,"_id":"ckbacy5su0002nfay3tckf05a","content":"<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><ul>\n<li><b>硕士 计算机科学与技术</b><br>华东师范大学<br>2018/06 - 现在</li>\n<li><b>本科 计算机科学与技术</b><br>华东师范大学<br>2014/09 - 2018/06<br><b>综合排名专业第一</b></li>\n</ul>\n<h2 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h2><h3 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h3><ul>\n<li><b>金牌</b><br>ACM-ICPC全国邀请赛（陕西）</li>\n<li><b>特等奖学金</b><br>大三学年</li>\n<li><b>二等奖</b><br>蓝桥杯C++组（上海）</li>\n<li><b>团体一等奖</b><br>中国高校计算机大赛-团体程序设计天梯赛</li>\n<li><b>高校一等奖</b><br>中国高校计算机大赛-团体程序设计天梯赛</li>\n</ul>\n<h3 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h3><ul>\n<li><b>银牌</b><br>ACM-ICPC亚洲区域赛（青岛）</li>\n<li><b>铜牌</b><br>ACM-CCPC总决赛（宁波）</li>\n<li><b>铜牌</b><br>ACM-CCPC（杭州）</li>\n<li><b>一等奖学金</b><br>大二学年</li>\n</ul>\n<h3 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h3><ul>\n<li><b>国家奖学金</b><br>大一学年</li>\n<li><b>铜牌</b><br>ACM-ICPC亚洲区域赛（上海）</li>\n<li><b>铜牌</b><br>ACM-ICPC上海大都会赛</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:godweiyang@gmail.com\" target=\"_blank\" rel=\"noopener\">godweiyang@gmail.com</a><br><a href=\"mailto:i@godweiyang.com\" target=\"_blank\" rel=\"noopener\">i@godweiyang.com</a><br><a href=\"mailto:792321264@qq.com\" target=\"_blank\" rel=\"noopener\">792321264@qq.com</a></li>\n<li><b>地址</b><br>上海市普陀区中山北路3663号理科大楼B906，邮编200062</li>\n<li><b>QQ 技术交流群</b><br>864832264</li>\n</ul>\n<p><img src=\"/medias/contact.jpg\" alt></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><ul>\n<li><b>硕士 计算机科学与技术</b><br>华东师范大学<br>2018/06 - 现在</li>\n<li><b>本科 计算机科学与技术</b><br>华东师范大学<br>2014/09 - 2018/06<br><b>综合排名专业第一</b></li>\n</ul>\n<h2 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h2><h3 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h3><ul>\n<li><b>金牌</b><br>ACM-ICPC全国邀请赛（陕西）</li>\n<li><b>特等奖学金</b><br>大三学年</li>\n<li><b>二等奖</b><br>蓝桥杯C++组（上海）</li>\n<li><b>团体一等奖</b><br>中国高校计算机大赛-团体程序设计天梯赛</li>\n<li><b>高校一等奖</b><br>中国高校计算机大赛-团体程序设计天梯赛</li>\n</ul>\n<h3 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h3><ul>\n<li><b>银牌</b><br>ACM-ICPC亚洲区域赛（青岛）</li>\n<li><b>铜牌</b><br>ACM-CCPC总决赛（宁波）</li>\n<li><b>铜牌</b><br>ACM-CCPC（杭州）</li>\n<li><b>一等奖学金</b><br>大二学年</li>\n</ul>\n<h3 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h3><ul>\n<li><b>国家奖学金</b><br>大一学年</li>\n<li><b>铜牌</b><br>ACM-ICPC亚洲区域赛（上海）</li>\n<li><b>铜牌</b><br>ACM-ICPC上海大都会赛</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:godweiyang@gmail.com\" target=\"_blank\" rel=\"noopener\">godweiyang@gmail.com</a><br><a href=\"mailto:i@godweiyang.com\" target=\"_blank\" rel=\"noopener\">i@godweiyang.com</a><br><a href=\"mailto:792321264@qq.com\" target=\"_blank\" rel=\"noopener\">792321264@qq.com</a></li>\n<li><b>地址</b><br>上海市普陀区中山北路3663号理科大楼B906，邮编200062</li>\n<li><b>QQ 技术交流群</b><br>864832264</li>\n</ul>\n<p><img src=\"/medias/contact.jpg\" alt></p>\n"},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**hulijie\n* **地址：**https://wizhiai.github.io\n* **简介：**github\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**hulijie\n* **地址：**https://wizhiai.github.io\n* **简介：**github\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","updated":"2020-04-24T07:31:49.133Z","path":"friends/index.html","comments":1,"_id":"ckbacy5uc0008nfayf289y5j4","content":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>hulijie</li>\n<li><strong>地址：</strong><a href=\"https://wizhiai.github.io\">https://wizhiai.github.io</a></li>\n<li><strong>简介：</strong>github</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\" target=\"_blank\" rel=\"noopener\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>hulijie</li>\n<li><strong>地址：</strong><a href=\"https://wizhiai.github.io\">https://wizhiai.github.io</a></li>\n<li><strong>简介：</strong>github</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\" target=\"_blank\" rel=\"noopener\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n"},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2020-04-05T02:43:43.000Z","path":"archives/index.html","comments":1,"_id":"ckbacy5ud000anfayms44etrn","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2020-04-05T02:43:43.000Z","path":"categories/index.html","comments":1,"_id":"ckbacy5ui000enfaypnnaxyag","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2020-04-05T02:43:43.000Z","path":"tags/index.html","comments":1,"_id":"ckbacy5uk000gnfayi5zjm8ce","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"contact","date":"2019-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**hulijie\n* **地址：**https://wizhiai.github.io\n* **简介：**github\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**hulijie\n* **地址：**https://wizhiai.github.io\n* **简介：**github\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","updated":"2020-04-24T07:32:02.016Z","path":"contact/index.html","comments":1,"_id":"ckbacy5un000jnfay45yvn4y4","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>hulijie</li>\n<li><strong>地址：</strong><a href=\"https://wizhiai.github.io\">https://wizhiai.github.io</a></li>\n<li><strong>简介：</strong>github</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\" target=\"_blank\" rel=\"noopener\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>hulijie</li>\n<li><strong>地址：</strong><a href=\"https://wizhiai.github.io\">https://wizhiai.github.io</a></li>\n<li><strong>简介：</strong>github</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\" target=\"_blank\" rel=\"noopener\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n"}],"Post":[{"_content":"随着Xcode的更新和工程项目代码的增加，Xcode在build的时候会显得越来越慢，尤其在内存低的OSX电脑上，查看网上一些大神给出的建议，本人亲测后发现确有实效，在此总结下\n\n### 1.将Debug Information Format改为DWARF\n\n> 在工程 Project 以及对应 Target 的 Build Settings 中，找到   Debug Information Format   这一项，将 Debug 时的 DWARF with dSYM file 改为DWARF。\n\n![img](https:////upload-images.jianshu.io/upload_images/2103901-75f6ecb29a82f99f.png?imageMogr2/auto-orient/strip|imageView2/2/w/553/format/webp)\n\n屏幕快照 2018-04-26 14.16.23.png\n\n![img](https:////upload-images.jianshu.io/upload_images/2103901-83792db8e1d47a64.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n屏幕快照 2018-04-17 10.08.57.png\n\n> - ###### 原因 :\n>\n> 这一项设置的是是否将调试信息加入到可执行文件中，改为DWARF后，如果程序崩溃，将无法输出崩溃位置对应的函数堆栈，但由于Debug模式下可以在XCode中查看调试信息，所以改为DWARF影响并不大。这一项更改完之后，可以大幅提升编译速度。 亲测这一项改动卓有成效\n\n### 2.将Build Active Architecture Only改为Yes\n\n> 在工程对应 Target 的 Build Settings 中，找到     Build Active Architecture Only    这一项，将Debug时的No改为Yes。\n\n![img](https:////upload-images.jianshu.io/upload_images/2103901-d0c984c1f1efd85d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n屏幕快照 2018-04-17 10.08.23.png\n\n> - ###### 原因 :\n>\n> 这一项设置的是是否仅编译当前架构的版本，如果为No，会编译所有架构的版本。需要注意的是，此选项在Release模式下必须为Yes，否则发布的ipa在部分设备上将不能运行。这一项更改完之后，可以显著提高编译速度。\n\n\n\n作者：luckySmileBoy\n链接：https://www.jianshu.com/p/023e08fbb1f8\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/1.将Debug Information Format改为DWARF.md","raw":"随着Xcode的更新和工程项目代码的增加，Xcode在build的时候会显得越来越慢，尤其在内存低的OSX电脑上，查看网上一些大神给出的建议，本人亲测后发现确有实效，在此总结下\n\n### 1.将Debug Information Format改为DWARF\n\n> 在工程 Project 以及对应 Target 的 Build Settings 中，找到   Debug Information Format   这一项，将 Debug 时的 DWARF with dSYM file 改为DWARF。\n\n![img](https:////upload-images.jianshu.io/upload_images/2103901-75f6ecb29a82f99f.png?imageMogr2/auto-orient/strip|imageView2/2/w/553/format/webp)\n\n屏幕快照 2018-04-26 14.16.23.png\n\n![img](https:////upload-images.jianshu.io/upload_images/2103901-83792db8e1d47a64.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n屏幕快照 2018-04-17 10.08.57.png\n\n> - ###### 原因 :\n>\n> 这一项设置的是是否将调试信息加入到可执行文件中，改为DWARF后，如果程序崩溃，将无法输出崩溃位置对应的函数堆栈，但由于Debug模式下可以在XCode中查看调试信息，所以改为DWARF影响并不大。这一项更改完之后，可以大幅提升编译速度。 亲测这一项改动卓有成效\n\n### 2.将Build Active Architecture Only改为Yes\n\n> 在工程对应 Target 的 Build Settings 中，找到     Build Active Architecture Only    这一项，将Debug时的No改为Yes。\n\n![img](https:////upload-images.jianshu.io/upload_images/2103901-d0c984c1f1efd85d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\n\n屏幕快照 2018-04-17 10.08.23.png\n\n> - ###### 原因 :\n>\n> 这一项设置的是是否仅编译当前架构的版本，如果为No，会编译所有架构的版本。需要注意的是，此选项在Release模式下必须为Yes，否则发布的ipa在部分设备上将不能运行。这一项更改完之后，可以显著提高编译速度。\n\n\n\n作者：luckySmileBoy\n链接：https://www.jianshu.com/p/023e08fbb1f8\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"1.将Debug Information Format改为DWARF","published":1,"date":"2020-04-15T09:08:38.360Z","updated":"2020-04-15T09:08:38.360Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5sv0003nfayvn5i2pd3","content":"<p>随着Xcode的更新和工程项目代码的增加，Xcode在build的时候会显得越来越慢，尤其在内存低的OSX电脑上，查看网上一些大神给出的建议，本人亲测后发现确有实效，在此总结下</p>\n<h3 id=\"1-将Debug-Information-Format改为DWARF\"><a href=\"#1-将Debug-Information-Format改为DWARF\" class=\"headerlink\" title=\"1.将Debug Information Format改为DWARF\"></a>1.将Debug Information Format改为DWARF</h3><blockquote>\n<p>在工程 Project 以及对应 Target 的 Build Settings 中，找到   Debug Information Format   这一项，将 Debug 时的 DWARF with dSYM file 改为DWARF。</p>\n</blockquote>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/2103901-75f6ecb29a82f99f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/553/format/webp\" alt=\"img\"></p>\n<p>屏幕快照 2018-04-26 14.16.23.png</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/2103901-83792db8e1d47a64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<p>屏幕快照 2018-04-17 10.08.57.png</p>\n<blockquote>\n<ul>\n<li><h6 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因 :\"></a>原因 :</h6></li>\n</ul>\n<p>这一项设置的是是否将调试信息加入到可执行文件中，改为DWARF后，如果程序崩溃，将无法输出崩溃位置对应的函数堆栈，但由于Debug模式下可以在XCode中查看调试信息，所以改为DWARF影响并不大。这一项更改完之后，可以大幅提升编译速度。 亲测这一项改动卓有成效</p>\n</blockquote>\n<h3 id=\"2-将Build-Active-Architecture-Only改为Yes\"><a href=\"#2-将Build-Active-Architecture-Only改为Yes\" class=\"headerlink\" title=\"2.将Build Active Architecture Only改为Yes\"></a>2.将Build Active Architecture Only改为Yes</h3><blockquote>\n<p>在工程对应 Target 的 Build Settings 中，找到     Build Active Architecture Only    这一项，将Debug时的No改为Yes。</p>\n</blockquote>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/2103901-d0c984c1f1efd85d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<p>屏幕快照 2018-04-17 10.08.23.png</p>\n<blockquote>\n<ul>\n<li><h6 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因 :\"></a>原因 :</h6></li>\n</ul>\n<p>这一项设置的是是否仅编译当前架构的版本，如果为No，会编译所有架构的版本。需要注意的是，此选项在Release模式下必须为Yes，否则发布的ipa在部分设备上将不能运行。这一项更改完之后，可以显著提高编译速度。</p>\n</blockquote>\n<p>作者：luckySmileBoy<br>链接：<a href=\"https://www.jianshu.com/p/023e08fbb1f8\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/023e08fbb1f8</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>随着Xcode的更新和工程项目代码的增加，Xcode在build的时候会显得越来越慢，尤其在内存低的OSX电脑上，查看网上一些大神给出的建议，本人亲测后发现确有实效，在此总结下</p>\n<h3 id=\"1-将Debug-Information-Format改为DWARF\"><a href=\"#1-将Debug-Information-Format改为DWARF\" class=\"headerlink\" title=\"1.将Debug Information Format改为DWARF\"></a>1.将Debug Information Format改为DWARF</h3><blockquote>\n<p>在工程 Project 以及对应 Target 的 Build Settings 中，找到   Debug Information Format   这一项，将 Debug 时的 DWARF with dSYM file 改为DWARF。</p>\n</blockquote>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/2103901-75f6ecb29a82f99f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/553/format/webp\" alt=\"img\"></p>\n<p>屏幕快照 2018-04-26 14.16.23.png</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/2103901-83792db8e1d47a64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<p>屏幕快照 2018-04-17 10.08.57.png</p>\n<blockquote>\n<ul>\n<li><h6 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因 :\"></a>原因 :</h6></li>\n</ul>\n<p>这一项设置的是是否将调试信息加入到可执行文件中，改为DWARF后，如果程序崩溃，将无法输出崩溃位置对应的函数堆栈，但由于Debug模式下可以在XCode中查看调试信息，所以改为DWARF影响并不大。这一项更改完之后，可以大幅提升编译速度。 亲测这一项改动卓有成效</p>\n</blockquote>\n<h3 id=\"2-将Build-Active-Architecture-Only改为Yes\"><a href=\"#2-将Build-Active-Architecture-Only改为Yes\" class=\"headerlink\" title=\"2.将Build Active Architecture Only改为Yes\"></a>2.将Build Active Architecture Only改为Yes</h3><blockquote>\n<p>在工程对应 Target 的 Build Settings 中，找到     Build Active Architecture Only    这一项，将Debug时的No改为Yes。</p>\n</blockquote>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/2103901-d0c984c1f1efd85d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"img\"></p>\n<p>屏幕快照 2018-04-17 10.08.23.png</p>\n<blockquote>\n<ul>\n<li><h6 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因 :\"></a>原因 :</h6></li>\n</ul>\n<p>这一项设置的是是否仅编译当前架构的版本，如果为No，会编译所有架构的版本。需要注意的是，此选项在Release模式下必须为Yes，否则发布的ipa在部分设备上将不能运行。这一项更改完之后，可以显著提高编译速度。</p>\n</blockquote>\n<p>作者：luckySmileBoy<br>链接：<a href=\"https://www.jianshu.com/p/023e08fbb1f8\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/023e08fbb1f8</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"click the area around the prompt view to hide the promot view","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-23T09:14:30.000Z","password":null,"summary":null,"_content":"\n// 点击提示框视图以外的其他地方时隐藏弹框\n-(void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event{\n\n    CGPoint point = [[touches anyObject] locationInView:self];\n    point = [self.alertView.layer convertPoint:point fromLayer:self.layer];\n    if (![self.alertView.layer containsPoint:point]) {\n        self.hidden = YES;\n    }\n\n其中。alertview为提示view，改为你的提示框即可。\n\n![截屏2020-04-23 下午5.26.47](click-the-area-around-the-prompt-view-to-hide-the-promot-view/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%885.26.47.png)\n\n此为获取到非提示框区域需要执行的事件，可以改为你的。\n\n![截屏2020-04-23 下午5.26.47](click-the-area-around-the-prompt-view-to-hide-the-promot-view/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%885.26.47-7634116.png)\n\n","source":"_posts/click-the-area-around-the-prompt-view-to-hide-the-promot-view.md","raw":"---\ntitle: click the area around the prompt view to hide the promot view\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-23 17:14:30\npassword:\nsummary:\ntags:\ncategories:\n---\n\n// 点击提示框视图以外的其他地方时隐藏弹框\n-(void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event{\n\n    CGPoint point = [[touches anyObject] locationInView:self];\n    point = [self.alertView.layer convertPoint:point fromLayer:self.layer];\n    if (![self.alertView.layer containsPoint:point]) {\n        self.hidden = YES;\n    }\n\n其中。alertview为提示view，改为你的提示框即可。\n\n![截屏2020-04-23 下午5.26.47](click-the-area-around-the-prompt-view-to-hide-the-promot-view/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%885.26.47.png)\n\n此为获取到非提示框区域需要执行的事件，可以改为你的。\n\n![截屏2020-04-23 下午5.26.47](click-the-area-around-the-prompt-view-to-hide-the-promot-view/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%885.26.47-7634116.png)\n\n","slug":"click-the-area-around-the-prompt-view-to-hide-the-promot-view","published":1,"updated":"2020-04-23T09:28:49.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5t10004nfayxl4y9nqk","content":"<p>// 点击提示框视图以外的其他地方时隐藏弹框<br>-(void)touchesBegan:(NSSet&lt;UITouch <em>&gt; </em>)touches withEvent:(UIEvent *)event{</p>\n<pre><code>CGPoint point = [[touches anyObject] locationInView:self];\npoint = [self.alertView.layer convertPoint:point fromLayer:self.layer];\nif (![self.alertView.layer containsPoint:point]) {\n    self.hidden = YES;\n}</code></pre><p>其中。alertview为提示view，改为你的提示框即可。</p>\n<p><img src=\"//wizhiai.github.io/2020/04/23/click-the-area-around-the-prompt-view-to-hide-the-promot-view/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%885.26.47.png\" alt=\"截屏2020-04-23 下午5.26.47\"></p>\n<p>此为获取到非提示框区域需要执行的事件，可以改为你的。</p>\n<p><img src=\"//wizhiai.github.io/2020/04/23/click-the-area-around-the-prompt-view-to-hide-the-promot-view/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%885.26.47-7634116.png\" alt=\"截屏2020-04-23 下午5.26.47\"></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>// 点击提示框视图以外的其他地方时隐藏弹框<br>-(void)touchesBegan:(NSSet&lt;UITouch <em>&gt; </em>)touches withEvent:(UIEvent *)event{</p>\n<pre><code>CGPoint point = [[touches anyObject] locationInView:self];\npoint = [self.alertView.layer convertPoint:point fromLayer:self.layer];\nif (![self.alertView.layer containsPoint:point]) {\n    self.hidden = YES;\n}</code></pre><p>其中。alertview为提示view，改为你的提示框即可。</p>\n<p><img src=\"//wizhiai.github.io/2020/04/23/click-the-area-around-the-prompt-view-to-hide-the-promot-view/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%885.26.47.png\" alt=\"截屏2020-04-23 下午5.26.47\"></p>\n<p>此为获取到非提示框区域需要执行的事件，可以改为你的。</p>\n<p><img src=\"//wizhiai.github.io/2020/04/23/click-the-area-around-the-prompt-view-to-hide-the-promot-view/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%885.26.47-7634116.png\" alt=\"截屏2020-04-23 下午5.26.47\"></p>\n"},{"title":"github私有库开放","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-21T06:52:05.000Z","password":null,"summary":null,"_content":"\n\n\n### [GitHub is now free for teams - The GitHub Blog](https://github.blog/2020-04-14-github-is-now-free-for-teams/?from=timeline&isappinstalled=0)\n\nGitHub CEO Nat Friedman 宣布已面向全体 GitHub 用户和团队提供不限制协作人数的私有仓库，并宣称 GitHub 的全部核心功能现已对所有人免费提供。\n\n去年 GitHub 宣布私有仓库免费，同时提供 3 个免费协作人数的名额，如果需要更多的协作人数，则需要付费。但从现在开始，任何团队都可以免费使用不限制协作人数的私有仓库。\n\n喜大普奔\n\n","source":"_posts/github私有库开发.md","raw":"---\ntitle: github私有库开放\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-21 14:52:05\npassword:\nsummary:\ntags:\ncategories:\n\n---\n\n\n\n### [GitHub is now free for teams - The GitHub Blog](https://github.blog/2020-04-14-github-is-now-free-for-teams/?from=timeline&isappinstalled=0)\n\nGitHub CEO Nat Friedman 宣布已面向全体 GitHub 用户和团队提供不限制协作人数的私有仓库，并宣称 GitHub 的全部核心功能现已对所有人免费提供。\n\n去年 GitHub 宣布私有仓库免费，同时提供 3 个免费协作人数的名额，如果需要更多的协作人数，则需要付费。但从现在开始，任何团队都可以免费使用不限制协作人数的私有仓库。\n\n喜大普奔\n\n","slug":"github私有库开发","published":1,"updated":"2020-04-21T06:52:59.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5t30005nfay7wxpto76","content":"<h3 id=\"GitHub-is-now-free-for-teams-The-GitHub-Blog\"><a href=\"#GitHub-is-now-free-for-teams-The-GitHub-Blog\" class=\"headerlink\" title=\"GitHub is now free for teams - The GitHub Blog\"></a><a href=\"https://github.blog/2020-04-14-github-is-now-free-for-teams/?from=timeline&isappinstalled=0\" target=\"_blank\" rel=\"noopener\">GitHub is now free for teams - The GitHub Blog</a></h3><p>GitHub CEO Nat Friedman 宣布已面向全体 GitHub 用户和团队提供不限制协作人数的私有仓库，并宣称 GitHub 的全部核心功能现已对所有人免费提供。</p>\n<p>去年 GitHub 宣布私有仓库免费，同时提供 3 个免费协作人数的名额，如果需要更多的协作人数，则需要付费。但从现在开始，任何团队都可以免费使用不限制协作人数的私有仓库。</p>\n<p>喜大普奔</p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h3 id=\"GitHub-is-now-free-for-teams-The-GitHub-Blog\"><a href=\"#GitHub-is-now-free-for-teams-The-GitHub-Blog\" class=\"headerlink\" title=\"GitHub is now free for teams - The GitHub Blog\"></a><a href=\"https://github.blog/2020-04-14-github-is-now-free-for-teams/?from=timeline&isappinstalled=0\" target=\"_blank\" rel=\"noopener\">GitHub is now free for teams - The GitHub Blog</a></h3><p>GitHub CEO Nat Friedman 宣布已面向全体 GitHub 用户和团队提供不限制协作人数的私有仓库，并宣称 GitHub 的全部核心功能现已对所有人免费提供。</p>\n<p>去年 GitHub 宣布私有仓库免费，同时提供 3 个免费协作人数的名额，如果需要更多的协作人数，则需要付费。但从现在开始，任何团队都可以免费使用不限制协作人数的私有仓库。</p>\n<p>喜大普奔</p>\n"},{"title":"KVO进阶","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-24T07:11:58.000Z","password":null,"summary":null,"_content":"\n![171a512df9918245 ](KVO/171a512df9918245.jpg)\n\nKVO的流程图\n\n\n\n\n\n# 一. KVO的定义\n\n> `Key-value observing` is a mechanism that allows objects to be notified of changes to specified properties of other objects.\n\n`KVO (Key-value observing)` 是一个非正式协议，允许对象在其他对象的指定属性发生更改时得到通知。iOS开发者可以使用`KVO` 来检测对象属性的变化、快速做出响应，这能够为我们在开发强交互、响应式应用以及实现视图和模型的双向绑定时提供大量的帮助。\n\n> KVO’s primary benefit is that you don’t have to implement your own scheme to send notifications every time a property changes. Its well-defined infrastructure has framework-level support that makes it easy to adopt—typically you do not have to add any code to your project. In addition, the infrastructure is already full-featured, which makes it easy to support multiple observers for a single property, as well as dependent values.\n\n`KVO`的主要好处是，不必在每次属性更改时都实现自己的方案来发送通知。这个过程大部分是内建的，自动的，透明的。这使得采用它很容易，通常您不必向项目中添加任何代码。此外，KVO支持单个属性添加多个观察者以及依赖值。\n\n# 二. 注册KVO -- Registering for Key-Value Observing\n\n## 2.1 注册观察者 -- Registering as an Observer\n\n```\n- (void)addObserver:(NSObject *)observer\n         forKeyPath:(NSString *)keyPath\n            options:(NSKeyValueObservingOptions)options\n            context:(void *)context;\n复制代码\n```\n\n- `observer`: 注册 KVO 通知的对象。观察者必须实现 `key-value observing` 方法 - `observeValueForKeyPath:ofObject:change:context:`。\n- `keyPath`: 被观察者的属性的 `keypath`，相对于接受者，值不能是 nil。\n- `options`: 代表 `NSKeyValueObservingOptions` 的位掩码，它指定了观察通知中包含了什么\n- `context` :在 `observeValueForKeyPath:ofObject:change:context:` 传给 `observer` 参数的上下文\n\n### 2.1.1 更好的 keyPath\n\n传字符串做为 keypath 比直接使用属性更糟糕，因为任何错字或者拼写错误都不会被编译器察觉，最终导致不能正常工作。 一个聪明的解决方案是使用 `NSStringFromSelector` 和一个 `@selector` 字面值:\n\n```\nNSStringFromSelector(@selector(isFinished))\n复制代码\n```\n\n因为 `@selector` 检查目标中的所有可用 `selector`，这并不能阻止所有的错误，但它可以用来捕获大部分改变。\n\n### 2.1.2 更好的 context\n\n关于context，苹果官方文档也做了精彩的注释。\n\n> The context pointer in the addObserver:forKeyPath:options:context: message contains arbitrary data that will be passed back to the observer in the corresponding change notifications. You may specify NULL and rely entirely on the key path string to determine the origin of a change notification, but this approach may cause problems for an object whose superclass is also observing the same key path for different reasons.\n\n`context` 中包含着将在相应的更改通知中传递回观察员的任意数据。您可以指定NULL并完全依赖于`keyPath`确定更改通知的来源。但是这种方法可能出现问题：**尤其是处理那些继承自同一个父类的子类，并且这些子类有相同的 `keypath`。**\n\n> A safer and more extensible approach is to use the context to ensure notifications you receive are destined for your observer and not a superclass.\n\n一种更安全、更可扩展的方法是：使用`context`来确保接收到的通知是发送给观察者的，而不是发送给超类。 如何设置一个好的 `content` 呢？苹果官方文档也给出了推荐的方法。\n\n```\n//  a Person instance registers itself as an observer for an Account instance’s\n// 大体意思就是：一个静态变量存着它自己的指针。这意味着它自己什么也没有。\nstatic void *PersonAccountBalanceContext = &PersonAccountBalanceContext;\nstatic void *PersonAccountInterestRateContext = &PersonAccountInterestRateContext;\n\n- (void)registerAsObserverForAccount:(Account*)account {\n    [account addObserver:self\n              forKeyPath:@\"balance\"\n                 options:(NSKeyValueObservingOptionNew |\n                          NSKeyValueObservingOptionOld)\n                 context:PersonAccountBalanceContext];\n \n    [account addObserver:self\n              forKeyPath:@\"interestRate\"\n                 options:(NSKeyValueObservingOptionNew |\n                          NSKeyValueObservingOptionOld)\n                  context:PersonAccountInterestRateContext];\n}\n复制代码\n```\n\n## 2.2 接受变化 -- Receiving Notification of a Change\n\n```\n- (void)observeValueForKeyPath:(NSString *)keyPath\n                      ofObject:(id)object\n                        change:(NSDictionary *)change\n                       context:(void *)context {\n \n    if (context == PersonAccountBalanceContext) {\n        // Do something with the balance…\n \n    } else if (context == PersonAccountInterestRateContext) {\n        // Do something with the interest rate…\n \n    } else {\n        // Any unrecognized context must belong to super\n        [super observeValueForKeyPath:keyPath\n                             ofObject:object\n                               change:change\n                               context:context];\n    }\n}\n复制代码\n```\n\n## 2.3 移除观察者 -- Removing an Object as an Observer\n\n苹果官方文档推荐在 `init` 或 `viewDidLoad` add观察者，在 `dealloc` 里移除观察者, 保证 `add` 和 `remove` 是成对出现的。\n\n```\n- (void)unregisterAsObserverForAccount:(Account*)account {\n    [account removeObserver:self\n                 forKeyPath:@\"balance\"\n                    context:PersonAccountBalanceContext];\n \n    [account removeObserver:self\n                 forKeyPath:@\"interestRate\"\n                    context:PersonAccountInterestRateContext];\n}\n复制代码\n```\n\n### 更好的remove\n\n调用 `–removeObserver:forKeyPath:context:`时， 当这个对象没有被注册为观察者（因为它已经解注册了或者开始没有注册），会抛出一个异常。有意思的是，没有一个内建的方式来检查对象是否注册。 苹果官方文档推荐使用： `@try` / `@catch` 移除观察者。\n\n```\n- (void)dealloc {\n    @try {\n        // 3. unsubscribe\n        [_account removeObserver:self\n                      forKeyPath:NSStringFromSelector(@selector(contentSize))\n                         context:ContentSizeContext];\n    }\n    @catch (NSException *exception) {\n        \n    }\n}\n复制代码\n```\n\n# 三. KVO兼容 -- KVO Compliance\n\n> To use KVO, first you must ensure that the observed object, the Account in this case, is KVO compliant. Typically, if your objects inherit from NSObject and you create properties in the usual way, your objects and their properties will automatically be KVO Compliant. It is also possible to implement compliance manually. KVO Compliance describes the difference between automatic and manual key-value observing, and how to implement both.\n\n要使用`KVO`，首先必须确保被观察的对象符合`KVO`。通常，如果您的对象继承自`NSObject`，并且您以通常的方式创建属性，那么您的对象及其属性将自动与`KVO`兼容。当然，也可以手动实现遵从性。`KVO Compliance`讲述述了自动和手动键值观察之间的区别，以及如何实现两者。\n\n可以通过复写 `automaticallyNotifiesObserversForKey:` 的返回值，选择自动退出 KVO。同时该类方法还能完成控制特定属性的目的。\n\n```\n+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)theKey {\n \n    BOOL automatic = NO;\n    if ([theKey isEqualToString:@\"balance\"]) {\n        automatic = NO;\n    } else {\n        automatic = [super automaticallyNotifiesObserversForKey:theKey];\n    }\n    return automatic;\n}\n复制代码\n```\n\n## 3.1 自动KVO -- Automatic Change Notification\n\n```\n// Call the accessor method.\n[account setName:@\"Savings\"];\n \n// Use setValue:forKey:.\n[account setValue:@\"Savings\" forKey:@\"name\"];\n \n// Use a key path, where 'account' is a kvc-compliant property of 'document'.\n[document setValue:@\"Savings\" forKeyPath:@\"account.name\"];\n \n// Use mutableArrayValueForKey: to retrieve a relationship proxy object.\nTransaction *newTransaction = <#Create a new transaction for the account#>;\nNSMutableArray *transactions = [account mutableArrayValueForKey:@\"transactions\"];\n[transactions addObject:newTransaction];\n复制代码\n```\n\n**注：** 可不数组直接addObject不会触发kvc，所以也不会触发kvo\n\n## 3.2 手动KVO -- Manual Change Notification\n\n手动 KVO 可以帮助我们将多个属性值的更改合并成一个，这样在回调的时候就有一次了，同时也能最大程度地减少处于应用程序特定原因而导致的通知发生。\n\n- 要实现手动观察者通知，请在更改值之前调用`willChangeValueForKey`，在更改值之后调用`didChangeValueForKey`\n\n```\n- (void)setBalance:(double)theBalance {\n    [self willChangeValueForKey:@\"balance\"];\n    _balance = theBalance;\n    [self didChangeValueForKey:@\"balance\"];\n}\n复制代码\n```\n\n- 为了性能最佳，通过检查值是否发生变化，最小化发送不必要的通知\n\n```\n- (void)setBalance:(double)theBalance {\n    if (theBalance != _balance) {\n        [self willChangeValueForKey:@\"balance\"];\n        _balance = theBalance;\n        [self didChangeValueForKey:@\"balance\"];\n    }\n}\n复制代码\n```\n\n- 如果一个操作导致多个键发生更改，应该这样更改\n\n```\n- (void)setBalance:(double)theBalance {\n    [self willChangeValueForKey:@\"balance\"];\n    [self willChangeValueForKey:@\"itemChanged\"];\n    _balance = theBalance;\n    _itemChanged = _itemChanged+1;\n    [self didChangeValueForKey:@\"itemChanged\"];\n    [self didChangeValueForKey:@\"balance\"];\n}\n复制代码\n```\n\n- 对于有序的一对多关系属性，不仅必须指定已更改的键，还必须指定更改的类型和所涉及对象的索引。 更改的类型是 `NSKeyValueChange`（ `NSKeyValueChangeInsertion`，`NSKeyValueChangeRemoval` 或 `NSKeyValueChangeReplacement`），受影响的对象的索引用 `NSIndexSet` 对象\n\n```\n- (void)removeTransactionsAtIndexes:(NSIndexSet *)indexes {\n    [self willChange:NSKeyValueChangeRemoval\n        valuesAtIndexes:indexes forKey:@\"transactions\"];\n \n    // Remove the transaction objects at the specified indexes.\n \n    [self didChange:NSKeyValueChangeRemoval\n        valuesAtIndexes:indexes forKey:@\"transactions\"];\n}\n复制代码\n```\n\n# 四. 注册依赖键 -- Registering Dependent Keys\n\n有一些属性的值取决于一个或者多个其他对象的属性值，一旦某个被依赖的属性值变了，依赖它的属性的变化也需要被通知。\n\n## 4.1 To-One Relationships\n\n要自动触发 `To-One` 关系，有两种方法：\n\n- 重写 `keyPathsForValuesAffectingValueForKey:`方法\n- 定义名称为 `keyPathsForValuesAffecting` 的方法。\n\n举个例子： 一个人的全名 fullName 是由 firstName 和 lastName 组成的，一个观察 fullName 的程序在 firstName 或者 lastName 变化时也应该接收到通知。\n\n```\n- (NSString *)fullName\n{\n    return [NSString stringWithFormat:@\"%@ %@\",firstName, lastName];\n}\n复制代码\n```\n\n1. 方法一：重写 `keyPathsForValuesAffectingValueForKey:`方法, 来表明 fullname 属性是依赖于 firstname 和 lastname 的：\n\n```\n+ (NSSet *)keyPathsForValuesAffectingValueForKey:(NSString *)key {\n \n    NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];\n \n    if ([key isEqualToString:@\"fullName\"]) {\n        NSArray *affectingKeys = @[@\"lastName\", @\"firstName\"];\n        keyPaths = [keyPaths setByAddingObjectsFromArray: affectingKeys];\n    }\n    return keyPaths;\n}\n复制代码\n```\n\n相当于在影响 fullName 值的 keypath 中新加了两个key：lastName 和 firstName，很容易理解。\n\n值得注意的是：需要先对父类发送 `keyPathsForValuesAffectingValueForKey` 消息，以免干扰父类中对此方法的重写\n\n1. 方法二：实现一个遵循命名方式为keyPathsForValuesAffecting的类方法，是依赖于其他值的属性名（首字母大写）\n\n```\n+ (NSSet *)keyPathsForValuesAffectingFullName\n{\n    return [NSSet setWithObjects:@\"lastName\", @\"firstName\", nil];\n}\n复制代码\n```\n\n如果在分类中，使用 `keyPathsForValuesAffectingFullName` 更合理，因为分类中是不允许重载方法的，所以 `keyPathsForValuesAffectingValueForKey` 方法肯定是不能在分类中使用的。\n\n## 4.2 To-many Relationships\n\n`keyPathsForValuesAffectingValueForKey:`方法不支持包含 `to-many` 关系的 `keypath` 。\n\n比如，有一个 `Department（部门）` 类，它有一个针对 `Employee（雇员）` 类的 to-many 关系，`Employee`类有 `salary（薪资）`属性。你希望 `Department`类有一个 `totalSalary` 属性来计算所有员工的薪水，也就是 `Department的totalSalary` 依赖于所有 `Employee的salary` 属性。你不能通过实现 `keyPathsForValuesAffectingTotalSalary` 方法并返回 `employees.salary`。\n\n你可以用KVO将`parent`（比如Department）作为所有`children`（比如Employee）相关属性的观察者。你必须在把child添加或删除到parent时也把parent作为child的观察者添加或删除。在`observeValueForKeyPath:ofObject:change:context:`方法中我们可以针对被依赖项的变更来更新依赖项的值：\n\n```\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {\n \n    if (context == totalSalaryContext) {\n        [self updateTotalSalary];\n    }\n    else\n    // deal with other observations and/or invoke super...\n}\n \n- (void)updateTotalSalary {\n    [self setTotalSalary:[self valueForKeyPath:@\"employees.@sum.salary\"]];\n}\n \n- (void)setTotalSalary:(NSNumber *)newTotalSalary {\n \n    if (totalSalary != newTotalSalary) {\n        [self willChangeValueForKey:@\"totalSalary\"];\n        _totalSalary = newTotalSalary;\n        [self didChangeValueForKey:@\"totalSalary\"];\n    }\n}\n \n- (NSNumber *)totalSalary {\n    return _totalSalary;\n}\n复制代码\n```\n\n将 Department 实例对象注册为观察者，然后观察对象为 totalSalary 属性，但是在通知回调中会手动调用 totalSalary 属性的 setter 方法，并且传入值是通过 KVC 的集合运算符的方式取出 employees 属性所对应的集合中所有 sum 值之和。然后在 totalSalary 属性的 setter 方法中，会相应的调用 willChangeValueForKey: 和 didChangeValueForKey: 方法。\n\n\n","source":"_posts/KVO.md","raw":"---\ntitle: KVO进阶\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-24 15:11:58\npassword:\nsummary:\ntags:\ncategories:\n---\n\n![171a512df9918245 ](KVO/171a512df9918245.jpg)\n\nKVO的流程图\n\n\n\n\n\n# 一. KVO的定义\n\n> `Key-value observing` is a mechanism that allows objects to be notified of changes to specified properties of other objects.\n\n`KVO (Key-value observing)` 是一个非正式协议，允许对象在其他对象的指定属性发生更改时得到通知。iOS开发者可以使用`KVO` 来检测对象属性的变化、快速做出响应，这能够为我们在开发强交互、响应式应用以及实现视图和模型的双向绑定时提供大量的帮助。\n\n> KVO’s primary benefit is that you don’t have to implement your own scheme to send notifications every time a property changes. Its well-defined infrastructure has framework-level support that makes it easy to adopt—typically you do not have to add any code to your project. In addition, the infrastructure is already full-featured, which makes it easy to support multiple observers for a single property, as well as dependent values.\n\n`KVO`的主要好处是，不必在每次属性更改时都实现自己的方案来发送通知。这个过程大部分是内建的，自动的，透明的。这使得采用它很容易，通常您不必向项目中添加任何代码。此外，KVO支持单个属性添加多个观察者以及依赖值。\n\n# 二. 注册KVO -- Registering for Key-Value Observing\n\n## 2.1 注册观察者 -- Registering as an Observer\n\n```\n- (void)addObserver:(NSObject *)observer\n         forKeyPath:(NSString *)keyPath\n            options:(NSKeyValueObservingOptions)options\n            context:(void *)context;\n复制代码\n```\n\n- `observer`: 注册 KVO 通知的对象。观察者必须实现 `key-value observing` 方法 - `observeValueForKeyPath:ofObject:change:context:`。\n- `keyPath`: 被观察者的属性的 `keypath`，相对于接受者，值不能是 nil。\n- `options`: 代表 `NSKeyValueObservingOptions` 的位掩码，它指定了观察通知中包含了什么\n- `context` :在 `observeValueForKeyPath:ofObject:change:context:` 传给 `observer` 参数的上下文\n\n### 2.1.1 更好的 keyPath\n\n传字符串做为 keypath 比直接使用属性更糟糕，因为任何错字或者拼写错误都不会被编译器察觉，最终导致不能正常工作。 一个聪明的解决方案是使用 `NSStringFromSelector` 和一个 `@selector` 字面值:\n\n```\nNSStringFromSelector(@selector(isFinished))\n复制代码\n```\n\n因为 `@selector` 检查目标中的所有可用 `selector`，这并不能阻止所有的错误，但它可以用来捕获大部分改变。\n\n### 2.1.2 更好的 context\n\n关于context，苹果官方文档也做了精彩的注释。\n\n> The context pointer in the addObserver:forKeyPath:options:context: message contains arbitrary data that will be passed back to the observer in the corresponding change notifications. You may specify NULL and rely entirely on the key path string to determine the origin of a change notification, but this approach may cause problems for an object whose superclass is also observing the same key path for different reasons.\n\n`context` 中包含着将在相应的更改通知中传递回观察员的任意数据。您可以指定NULL并完全依赖于`keyPath`确定更改通知的来源。但是这种方法可能出现问题：**尤其是处理那些继承自同一个父类的子类，并且这些子类有相同的 `keypath`。**\n\n> A safer and more extensible approach is to use the context to ensure notifications you receive are destined for your observer and not a superclass.\n\n一种更安全、更可扩展的方法是：使用`context`来确保接收到的通知是发送给观察者的，而不是发送给超类。 如何设置一个好的 `content` 呢？苹果官方文档也给出了推荐的方法。\n\n```\n//  a Person instance registers itself as an observer for an Account instance’s\n// 大体意思就是：一个静态变量存着它自己的指针。这意味着它自己什么也没有。\nstatic void *PersonAccountBalanceContext = &PersonAccountBalanceContext;\nstatic void *PersonAccountInterestRateContext = &PersonAccountInterestRateContext;\n\n- (void)registerAsObserverForAccount:(Account*)account {\n    [account addObserver:self\n              forKeyPath:@\"balance\"\n                 options:(NSKeyValueObservingOptionNew |\n                          NSKeyValueObservingOptionOld)\n                 context:PersonAccountBalanceContext];\n \n    [account addObserver:self\n              forKeyPath:@\"interestRate\"\n                 options:(NSKeyValueObservingOptionNew |\n                          NSKeyValueObservingOptionOld)\n                  context:PersonAccountInterestRateContext];\n}\n复制代码\n```\n\n## 2.2 接受变化 -- Receiving Notification of a Change\n\n```\n- (void)observeValueForKeyPath:(NSString *)keyPath\n                      ofObject:(id)object\n                        change:(NSDictionary *)change\n                       context:(void *)context {\n \n    if (context == PersonAccountBalanceContext) {\n        // Do something with the balance…\n \n    } else if (context == PersonAccountInterestRateContext) {\n        // Do something with the interest rate…\n \n    } else {\n        // Any unrecognized context must belong to super\n        [super observeValueForKeyPath:keyPath\n                             ofObject:object\n                               change:change\n                               context:context];\n    }\n}\n复制代码\n```\n\n## 2.3 移除观察者 -- Removing an Object as an Observer\n\n苹果官方文档推荐在 `init` 或 `viewDidLoad` add观察者，在 `dealloc` 里移除观察者, 保证 `add` 和 `remove` 是成对出现的。\n\n```\n- (void)unregisterAsObserverForAccount:(Account*)account {\n    [account removeObserver:self\n                 forKeyPath:@\"balance\"\n                    context:PersonAccountBalanceContext];\n \n    [account removeObserver:self\n                 forKeyPath:@\"interestRate\"\n                    context:PersonAccountInterestRateContext];\n}\n复制代码\n```\n\n### 更好的remove\n\n调用 `–removeObserver:forKeyPath:context:`时， 当这个对象没有被注册为观察者（因为它已经解注册了或者开始没有注册），会抛出一个异常。有意思的是，没有一个内建的方式来检查对象是否注册。 苹果官方文档推荐使用： `@try` / `@catch` 移除观察者。\n\n```\n- (void)dealloc {\n    @try {\n        // 3. unsubscribe\n        [_account removeObserver:self\n                      forKeyPath:NSStringFromSelector(@selector(contentSize))\n                         context:ContentSizeContext];\n    }\n    @catch (NSException *exception) {\n        \n    }\n}\n复制代码\n```\n\n# 三. KVO兼容 -- KVO Compliance\n\n> To use KVO, first you must ensure that the observed object, the Account in this case, is KVO compliant. Typically, if your objects inherit from NSObject and you create properties in the usual way, your objects and their properties will automatically be KVO Compliant. It is also possible to implement compliance manually. KVO Compliance describes the difference between automatic and manual key-value observing, and how to implement both.\n\n要使用`KVO`，首先必须确保被观察的对象符合`KVO`。通常，如果您的对象继承自`NSObject`，并且您以通常的方式创建属性，那么您的对象及其属性将自动与`KVO`兼容。当然，也可以手动实现遵从性。`KVO Compliance`讲述述了自动和手动键值观察之间的区别，以及如何实现两者。\n\n可以通过复写 `automaticallyNotifiesObserversForKey:` 的返回值，选择自动退出 KVO。同时该类方法还能完成控制特定属性的目的。\n\n```\n+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)theKey {\n \n    BOOL automatic = NO;\n    if ([theKey isEqualToString:@\"balance\"]) {\n        automatic = NO;\n    } else {\n        automatic = [super automaticallyNotifiesObserversForKey:theKey];\n    }\n    return automatic;\n}\n复制代码\n```\n\n## 3.1 自动KVO -- Automatic Change Notification\n\n```\n// Call the accessor method.\n[account setName:@\"Savings\"];\n \n// Use setValue:forKey:.\n[account setValue:@\"Savings\" forKey:@\"name\"];\n \n// Use a key path, where 'account' is a kvc-compliant property of 'document'.\n[document setValue:@\"Savings\" forKeyPath:@\"account.name\"];\n \n// Use mutableArrayValueForKey: to retrieve a relationship proxy object.\nTransaction *newTransaction = <#Create a new transaction for the account#>;\nNSMutableArray *transactions = [account mutableArrayValueForKey:@\"transactions\"];\n[transactions addObject:newTransaction];\n复制代码\n```\n\n**注：** 可不数组直接addObject不会触发kvc，所以也不会触发kvo\n\n## 3.2 手动KVO -- Manual Change Notification\n\n手动 KVO 可以帮助我们将多个属性值的更改合并成一个，这样在回调的时候就有一次了，同时也能最大程度地减少处于应用程序特定原因而导致的通知发生。\n\n- 要实现手动观察者通知，请在更改值之前调用`willChangeValueForKey`，在更改值之后调用`didChangeValueForKey`\n\n```\n- (void)setBalance:(double)theBalance {\n    [self willChangeValueForKey:@\"balance\"];\n    _balance = theBalance;\n    [self didChangeValueForKey:@\"balance\"];\n}\n复制代码\n```\n\n- 为了性能最佳，通过检查值是否发生变化，最小化发送不必要的通知\n\n```\n- (void)setBalance:(double)theBalance {\n    if (theBalance != _balance) {\n        [self willChangeValueForKey:@\"balance\"];\n        _balance = theBalance;\n        [self didChangeValueForKey:@\"balance\"];\n    }\n}\n复制代码\n```\n\n- 如果一个操作导致多个键发生更改，应该这样更改\n\n```\n- (void)setBalance:(double)theBalance {\n    [self willChangeValueForKey:@\"balance\"];\n    [self willChangeValueForKey:@\"itemChanged\"];\n    _balance = theBalance;\n    _itemChanged = _itemChanged+1;\n    [self didChangeValueForKey:@\"itemChanged\"];\n    [self didChangeValueForKey:@\"balance\"];\n}\n复制代码\n```\n\n- 对于有序的一对多关系属性，不仅必须指定已更改的键，还必须指定更改的类型和所涉及对象的索引。 更改的类型是 `NSKeyValueChange`（ `NSKeyValueChangeInsertion`，`NSKeyValueChangeRemoval` 或 `NSKeyValueChangeReplacement`），受影响的对象的索引用 `NSIndexSet` 对象\n\n```\n- (void)removeTransactionsAtIndexes:(NSIndexSet *)indexes {\n    [self willChange:NSKeyValueChangeRemoval\n        valuesAtIndexes:indexes forKey:@\"transactions\"];\n \n    // Remove the transaction objects at the specified indexes.\n \n    [self didChange:NSKeyValueChangeRemoval\n        valuesAtIndexes:indexes forKey:@\"transactions\"];\n}\n复制代码\n```\n\n# 四. 注册依赖键 -- Registering Dependent Keys\n\n有一些属性的值取决于一个或者多个其他对象的属性值，一旦某个被依赖的属性值变了，依赖它的属性的变化也需要被通知。\n\n## 4.1 To-One Relationships\n\n要自动触发 `To-One` 关系，有两种方法：\n\n- 重写 `keyPathsForValuesAffectingValueForKey:`方法\n- 定义名称为 `keyPathsForValuesAffecting` 的方法。\n\n举个例子： 一个人的全名 fullName 是由 firstName 和 lastName 组成的，一个观察 fullName 的程序在 firstName 或者 lastName 变化时也应该接收到通知。\n\n```\n- (NSString *)fullName\n{\n    return [NSString stringWithFormat:@\"%@ %@\",firstName, lastName];\n}\n复制代码\n```\n\n1. 方法一：重写 `keyPathsForValuesAffectingValueForKey:`方法, 来表明 fullname 属性是依赖于 firstname 和 lastname 的：\n\n```\n+ (NSSet *)keyPathsForValuesAffectingValueForKey:(NSString *)key {\n \n    NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];\n \n    if ([key isEqualToString:@\"fullName\"]) {\n        NSArray *affectingKeys = @[@\"lastName\", @\"firstName\"];\n        keyPaths = [keyPaths setByAddingObjectsFromArray: affectingKeys];\n    }\n    return keyPaths;\n}\n复制代码\n```\n\n相当于在影响 fullName 值的 keypath 中新加了两个key：lastName 和 firstName，很容易理解。\n\n值得注意的是：需要先对父类发送 `keyPathsForValuesAffectingValueForKey` 消息，以免干扰父类中对此方法的重写\n\n1. 方法二：实现一个遵循命名方式为keyPathsForValuesAffecting的类方法，是依赖于其他值的属性名（首字母大写）\n\n```\n+ (NSSet *)keyPathsForValuesAffectingFullName\n{\n    return [NSSet setWithObjects:@\"lastName\", @\"firstName\", nil];\n}\n复制代码\n```\n\n如果在分类中，使用 `keyPathsForValuesAffectingFullName` 更合理，因为分类中是不允许重载方法的，所以 `keyPathsForValuesAffectingValueForKey` 方法肯定是不能在分类中使用的。\n\n## 4.2 To-many Relationships\n\n`keyPathsForValuesAffectingValueForKey:`方法不支持包含 `to-many` 关系的 `keypath` 。\n\n比如，有一个 `Department（部门）` 类，它有一个针对 `Employee（雇员）` 类的 to-many 关系，`Employee`类有 `salary（薪资）`属性。你希望 `Department`类有一个 `totalSalary` 属性来计算所有员工的薪水，也就是 `Department的totalSalary` 依赖于所有 `Employee的salary` 属性。你不能通过实现 `keyPathsForValuesAffectingTotalSalary` 方法并返回 `employees.salary`。\n\n你可以用KVO将`parent`（比如Department）作为所有`children`（比如Employee）相关属性的观察者。你必须在把child添加或删除到parent时也把parent作为child的观察者添加或删除。在`observeValueForKeyPath:ofObject:change:context:`方法中我们可以针对被依赖项的变更来更新依赖项的值：\n\n```\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {\n \n    if (context == totalSalaryContext) {\n        [self updateTotalSalary];\n    }\n    else\n    // deal with other observations and/or invoke super...\n}\n \n- (void)updateTotalSalary {\n    [self setTotalSalary:[self valueForKeyPath:@\"employees.@sum.salary\"]];\n}\n \n- (void)setTotalSalary:(NSNumber *)newTotalSalary {\n \n    if (totalSalary != newTotalSalary) {\n        [self willChangeValueForKey:@\"totalSalary\"];\n        _totalSalary = newTotalSalary;\n        [self didChangeValueForKey:@\"totalSalary\"];\n    }\n}\n \n- (NSNumber *)totalSalary {\n    return _totalSalary;\n}\n复制代码\n```\n\n将 Department 实例对象注册为观察者，然后观察对象为 totalSalary 属性，但是在通知回调中会手动调用 totalSalary 属性的 setter 方法，并且传入值是通过 KVC 的集合运算符的方式取出 employees 属性所对应的集合中所有 sum 值之和。然后在 totalSalary 属性的 setter 方法中，会相应的调用 willChangeValueForKey: 和 didChangeValueForKey: 方法。\n\n\n","slug":"KVO","published":1,"updated":"2020-04-24T07:42:07.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5t80006nfay3ponvr9l","content":"<p><img src=\"//wizhiai.github.io/2020/04/24/kvo/171a512df9918245.jpg\" alt=\"171a512df9918245 \"></p>\n<p>KVO的流程图</p>\n<h1 id=\"一-KVO的定义\"><a href=\"#一-KVO的定义\" class=\"headerlink\" title=\"一. KVO的定义\"></a>一. KVO的定义</h1><blockquote>\n<p><code>Key-value observing</code> is a mechanism that allows objects to be notified of changes to specified properties of other objects.</p>\n</blockquote>\n<p><code>KVO (Key-value observing)</code> 是一个非正式协议，允许对象在其他对象的指定属性发生更改时得到通知。iOS开发者可以使用<code>KVO</code> 来检测对象属性的变化、快速做出响应，这能够为我们在开发强交互、响应式应用以及实现视图和模型的双向绑定时提供大量的帮助。</p>\n<blockquote>\n<p>KVO’s primary benefit is that you don’t have to implement your own scheme to send notifications every time a property changes. Its well-defined infrastructure has framework-level support that makes it easy to adopt—typically you do not have to add any code to your project. In addition, the infrastructure is already full-featured, which makes it easy to support multiple observers for a single property, as well as dependent values.</p>\n</blockquote>\n<p><code>KVO</code>的主要好处是，不必在每次属性更改时都实现自己的方案来发送通知。这个过程大部分是内建的，自动的，透明的。这使得采用它很容易，通常您不必向项目中添加任何代码。此外，KVO支持单个属性添加多个观察者以及依赖值。</p>\n<h1 id=\"二-注册KVO-–-Registering-for-Key-Value-Observing\"><a href=\"#二-注册KVO-–-Registering-for-Key-Value-Observing\" class=\"headerlink\" title=\"二. 注册KVO – Registering for Key-Value Observing\"></a>二. 注册KVO – Registering for Key-Value Observing</h1><h2 id=\"2-1-注册观察者-–-Registering-as-an-Observer\"><a href=\"#2-1-注册观察者-–-Registering-as-an-Observer\" class=\"headerlink\" title=\"2.1 注册观察者 – Registering as an Observer\"></a>2.1 注册观察者 – Registering as an Observer</h2><pre><code>- (void)addObserver:(NSObject *)observer\n         forKeyPath:(NSString *)keyPath\n            options:(NSKeyValueObservingOptions)options\n            context:(void *)context;\n复制代码</code></pre><ul>\n<li><code>observer</code>: 注册 KVO 通知的对象。观察者必须实现 <code>key-value observing</code> 方法 - <code>observeValueForKeyPath:ofObject:change:context:</code>。</li>\n<li><code>keyPath</code>: 被观察者的属性的 <code>keypath</code>，相对于接受者，值不能是 nil。</li>\n<li><code>options</code>: 代表 <code>NSKeyValueObservingOptions</code> 的位掩码，它指定了观察通知中包含了什么</li>\n<li><code>context</code> :在 <code>observeValueForKeyPath:ofObject:change:context:</code> 传给 <code>observer</code> 参数的上下文</li>\n</ul>\n<h3 id=\"2-1-1-更好的-keyPath\"><a href=\"#2-1-1-更好的-keyPath\" class=\"headerlink\" title=\"2.1.1 更好的 keyPath\"></a>2.1.1 更好的 keyPath</h3><p>传字符串做为 keypath 比直接使用属性更糟糕，因为任何错字或者拼写错误都不会被编译器察觉，最终导致不能正常工作。 一个聪明的解决方案是使用 <code>NSStringFromSelector</code> 和一个 <code>@selector</code> 字面值:</p>\n<pre><code>NSStringFromSelector(@selector(isFinished))\n复制代码</code></pre><p>因为 <code>@selector</code> 检查目标中的所有可用 <code>selector</code>，这并不能阻止所有的错误，但它可以用来捕获大部分改变。</p>\n<h3 id=\"2-1-2-更好的-context\"><a href=\"#2-1-2-更好的-context\" class=\"headerlink\" title=\"2.1.2 更好的 context\"></a>2.1.2 更好的 context</h3><p>关于context，苹果官方文档也做了精彩的注释。</p>\n<blockquote>\n<p>The context pointer in the addObserver:forKeyPath:options:context: message contains arbitrary data that will be passed back to the observer in the corresponding change notifications. You may specify NULL and rely entirely on the key path string to determine the origin of a change notification, but this approach may cause problems for an object whose superclass is also observing the same key path for different reasons.</p>\n</blockquote>\n<p><code>context</code> 中包含着将在相应的更改通知中传递回观察员的任意数据。您可以指定NULL并完全依赖于<code>keyPath</code>确定更改通知的来源。但是这种方法可能出现问题：<strong>尤其是处理那些继承自同一个父类的子类，并且这些子类有相同的 <code>keypath</code>。</strong></p>\n<blockquote>\n<p>A safer and more extensible approach is to use the context to ensure notifications you receive are destined for your observer and not a superclass.</p>\n</blockquote>\n<p>一种更安全、更可扩展的方法是：使用<code>context</code>来确保接收到的通知是发送给观察者的，而不是发送给超类。 如何设置一个好的 <code>content</code> 呢？苹果官方文档也给出了推荐的方法。</p>\n<pre><code>//  a Person instance registers itself as an observer for an Account instance’s\n// 大体意思就是：一个静态变量存着它自己的指针。这意味着它自己什么也没有。\nstatic void *PersonAccountBalanceContext = &amp;PersonAccountBalanceContext;\nstatic void *PersonAccountInterestRateContext = &amp;PersonAccountInterestRateContext;\n\n- (void)registerAsObserverForAccount:(Account*)account {\n    [account addObserver:self\n              forKeyPath:@&quot;balance&quot;\n                 options:(NSKeyValueObservingOptionNew |\n                          NSKeyValueObservingOptionOld)\n                 context:PersonAccountBalanceContext];\n\n    [account addObserver:self\n              forKeyPath:@&quot;interestRate&quot;\n                 options:(NSKeyValueObservingOptionNew |\n                          NSKeyValueObservingOptionOld)\n                  context:PersonAccountInterestRateContext];\n}\n复制代码</code></pre><h2 id=\"2-2-接受变化-–-Receiving-Notification-of-a-Change\"><a href=\"#2-2-接受变化-–-Receiving-Notification-of-a-Change\" class=\"headerlink\" title=\"2.2 接受变化 – Receiving Notification of a Change\"></a>2.2 接受变化 – Receiving Notification of a Change</h2><pre><code>- (void)observeValueForKeyPath:(NSString *)keyPath\n                      ofObject:(id)object\n                        change:(NSDictionary *)change\n                       context:(void *)context {\n\n    if (context == PersonAccountBalanceContext) {\n        // Do something with the balance…\n\n    } else if (context == PersonAccountInterestRateContext) {\n        // Do something with the interest rate…\n\n    } else {\n        // Any unrecognized context must belong to super\n        [super observeValueForKeyPath:keyPath\n                             ofObject:object\n                               change:change\n                               context:context];\n    }\n}\n复制代码</code></pre><h2 id=\"2-3-移除观察者-–-Removing-an-Object-as-an-Observer\"><a href=\"#2-3-移除观察者-–-Removing-an-Object-as-an-Observer\" class=\"headerlink\" title=\"2.3 移除观察者 – Removing an Object as an Observer\"></a>2.3 移除观察者 – Removing an Object as an Observer</h2><p>苹果官方文档推荐在 <code>init</code> 或 <code>viewDidLoad</code> add观察者，在 <code>dealloc</code> 里移除观察者, 保证 <code>add</code> 和 <code>remove</code> 是成对出现的。</p>\n<pre><code>- (void)unregisterAsObserverForAccount:(Account*)account {\n    [account removeObserver:self\n                 forKeyPath:@&quot;balance&quot;\n                    context:PersonAccountBalanceContext];\n\n    [account removeObserver:self\n                 forKeyPath:@&quot;interestRate&quot;\n                    context:PersonAccountInterestRateContext];\n}\n复制代码</code></pre><h3 id=\"更好的remove\"><a href=\"#更好的remove\" class=\"headerlink\" title=\"更好的remove\"></a>更好的remove</h3><p>调用 <code>–removeObserver:forKeyPath:context:</code>时， 当这个对象没有被注册为观察者（因为它已经解注册了或者开始没有注册），会抛出一个异常。有意思的是，没有一个内建的方式来检查对象是否注册。 苹果官方文档推荐使用： <code>@try</code> / <code>@catch</code> 移除观察者。</p>\n<pre><code>- (void)dealloc {\n    @try {\n        // 3. unsubscribe\n        [_account removeObserver:self\n                      forKeyPath:NSStringFromSelector(@selector(contentSize))\n                         context:ContentSizeContext];\n    }\n    @catch (NSException *exception) {\n\n    }\n}\n复制代码</code></pre><h1 id=\"三-KVO兼容-–-KVO-Compliance\"><a href=\"#三-KVO兼容-–-KVO-Compliance\" class=\"headerlink\" title=\"三. KVO兼容 – KVO Compliance\"></a>三. KVO兼容 – KVO Compliance</h1><blockquote>\n<p>To use KVO, first you must ensure that the observed object, the Account in this case, is KVO compliant. Typically, if your objects inherit from NSObject and you create properties in the usual way, your objects and their properties will automatically be KVO Compliant. It is also possible to implement compliance manually. KVO Compliance describes the difference between automatic and manual key-value observing, and how to implement both.</p>\n</blockquote>\n<p>要使用<code>KVO</code>，首先必须确保被观察的对象符合<code>KVO</code>。通常，如果您的对象继承自<code>NSObject</code>，并且您以通常的方式创建属性，那么您的对象及其属性将自动与<code>KVO</code>兼容。当然，也可以手动实现遵从性。<code>KVO Compliance</code>讲述述了自动和手动键值观察之间的区别，以及如何实现两者。</p>\n<p>可以通过复写 <code>automaticallyNotifiesObserversForKey:</code> 的返回值，选择自动退出 KVO。同时该类方法还能完成控制特定属性的目的。</p>\n<pre><code>+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)theKey {\n\n    BOOL automatic = NO;\n    if ([theKey isEqualToString:@&quot;balance&quot;]) {\n        automatic = NO;\n    } else {\n        automatic = [super automaticallyNotifiesObserversForKey:theKey];\n    }\n    return automatic;\n}\n复制代码</code></pre><h2 id=\"3-1-自动KVO-–-Automatic-Change-Notification\"><a href=\"#3-1-自动KVO-–-Automatic-Change-Notification\" class=\"headerlink\" title=\"3.1 自动KVO – Automatic Change Notification\"></a>3.1 自动KVO – Automatic Change Notification</h2><pre><code>// Call the accessor method.\n[account setName:@&quot;Savings&quot;];\n\n// Use setValue:forKey:.\n[account setValue:@&quot;Savings&quot; forKey:@&quot;name&quot;];\n\n// Use a key path, where &#39;account&#39; is a kvc-compliant property of &#39;document&#39;.\n[document setValue:@&quot;Savings&quot; forKeyPath:@&quot;account.name&quot;];\n\n// Use mutableArrayValueForKey: to retrieve a relationship proxy object.\nTransaction *newTransaction = &lt;#Create a new transaction for the account#&gt;;\nNSMutableArray *transactions = [account mutableArrayValueForKey:@&quot;transactions&quot;];\n[transactions addObject:newTransaction];\n复制代码</code></pre><p><strong>注：</strong> 可不数组直接addObject不会触发kvc，所以也不会触发kvo</p>\n<h2 id=\"3-2-手动KVO-–-Manual-Change-Notification\"><a href=\"#3-2-手动KVO-–-Manual-Change-Notification\" class=\"headerlink\" title=\"3.2 手动KVO – Manual Change Notification\"></a>3.2 手动KVO – Manual Change Notification</h2><p>手动 KVO 可以帮助我们将多个属性值的更改合并成一个，这样在回调的时候就有一次了，同时也能最大程度地减少处于应用程序特定原因而导致的通知发生。</p>\n<ul>\n<li>要实现手动观察者通知，请在更改值之前调用<code>willChangeValueForKey</code>，在更改值之后调用<code>didChangeValueForKey</code></li>\n</ul>\n<pre><code>- (void)setBalance:(double)theBalance {\n    [self willChangeValueForKey:@&quot;balance&quot;];\n    _balance = theBalance;\n    [self didChangeValueForKey:@&quot;balance&quot;];\n}\n复制代码</code></pre><ul>\n<li>为了性能最佳，通过检查值是否发生变化，最小化发送不必要的通知</li>\n</ul>\n<pre><code>- (void)setBalance:(double)theBalance {\n    if (theBalance != _balance) {\n        [self willChangeValueForKey:@&quot;balance&quot;];\n        _balance = theBalance;\n        [self didChangeValueForKey:@&quot;balance&quot;];\n    }\n}\n复制代码</code></pre><ul>\n<li>如果一个操作导致多个键发生更改，应该这样更改</li>\n</ul>\n<pre><code>- (void)setBalance:(double)theBalance {\n    [self willChangeValueForKey:@&quot;balance&quot;];\n    [self willChangeValueForKey:@&quot;itemChanged&quot;];\n    _balance = theBalance;\n    _itemChanged = _itemChanged+1;\n    [self didChangeValueForKey:@&quot;itemChanged&quot;];\n    [self didChangeValueForKey:@&quot;balance&quot;];\n}\n复制代码</code></pre><ul>\n<li>对于有序的一对多关系属性，不仅必须指定已更改的键，还必须指定更改的类型和所涉及对象的索引。 更改的类型是 <code>NSKeyValueChange</code>（ <code>NSKeyValueChangeInsertion</code>，<code>NSKeyValueChangeRemoval</code> 或 <code>NSKeyValueChangeReplacement</code>），受影响的对象的索引用 <code>NSIndexSet</code> 对象</li>\n</ul>\n<pre><code>- (void)removeTransactionsAtIndexes:(NSIndexSet *)indexes {\n    [self willChange:NSKeyValueChangeRemoval\n        valuesAtIndexes:indexes forKey:@&quot;transactions&quot;];\n\n    // Remove the transaction objects at the specified indexes.\n\n    [self didChange:NSKeyValueChangeRemoval\n        valuesAtIndexes:indexes forKey:@&quot;transactions&quot;];\n}\n复制代码</code></pre><h1 id=\"四-注册依赖键-–-Registering-Dependent-Keys\"><a href=\"#四-注册依赖键-–-Registering-Dependent-Keys\" class=\"headerlink\" title=\"四. 注册依赖键 – Registering Dependent Keys\"></a>四. 注册依赖键 – Registering Dependent Keys</h1><p>有一些属性的值取决于一个或者多个其他对象的属性值，一旦某个被依赖的属性值变了，依赖它的属性的变化也需要被通知。</p>\n<h2 id=\"4-1-To-One-Relationships\"><a href=\"#4-1-To-One-Relationships\" class=\"headerlink\" title=\"4.1 To-One Relationships\"></a>4.1 To-One Relationships</h2><p>要自动触发 <code>To-One</code> 关系，有两种方法：</p>\n<ul>\n<li>重写 <code>keyPathsForValuesAffectingValueForKey:</code>方法</li>\n<li>定义名称为 <code>keyPathsForValuesAffecting</code> 的方法。</li>\n</ul>\n<p>举个例子： 一个人的全名 fullName 是由 firstName 和 lastName 组成的，一个观察 fullName 的程序在 firstName 或者 lastName 变化时也应该接收到通知。</p>\n<pre><code>- (NSString *)fullName\n{\n    return [NSString stringWithFormat:@&quot;%@ %@&quot;,firstName, lastName];\n}\n复制代码</code></pre><ol>\n<li>方法一：重写 <code>keyPathsForValuesAffectingValueForKey:</code>方法, 来表明 fullname 属性是依赖于 firstname 和 lastname 的：</li>\n</ol>\n<pre><code>+ (NSSet *)keyPathsForValuesAffectingValueForKey:(NSString *)key {\n\n    NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];\n\n    if ([key isEqualToString:@&quot;fullName&quot;]) {\n        NSArray *affectingKeys = @[@&quot;lastName&quot;, @&quot;firstName&quot;];\n        keyPaths = [keyPaths setByAddingObjectsFromArray: affectingKeys];\n    }\n    return keyPaths;\n}\n复制代码</code></pre><p>相当于在影响 fullName 值的 keypath 中新加了两个key：lastName 和 firstName，很容易理解。</p>\n<p>值得注意的是：需要先对父类发送 <code>keyPathsForValuesAffectingValueForKey</code> 消息，以免干扰父类中对此方法的重写</p>\n<ol>\n<li>方法二：实现一个遵循命名方式为keyPathsForValuesAffecting的类方法，是依赖于其他值的属性名（首字母大写）</li>\n</ol>\n<pre><code>+ (NSSet *)keyPathsForValuesAffectingFullName\n{\n    return [NSSet setWithObjects:@&quot;lastName&quot;, @&quot;firstName&quot;, nil];\n}\n复制代码</code></pre><p>如果在分类中，使用 <code>keyPathsForValuesAffectingFullName</code> 更合理，因为分类中是不允许重载方法的，所以 <code>keyPathsForValuesAffectingValueForKey</code> 方法肯定是不能在分类中使用的。</p>\n<h2 id=\"4-2-To-many-Relationships\"><a href=\"#4-2-To-many-Relationships\" class=\"headerlink\" title=\"4.2 To-many Relationships\"></a>4.2 To-many Relationships</h2><p><code>keyPathsForValuesAffectingValueForKey:</code>方法不支持包含 <code>to-many</code> 关系的 <code>keypath</code> 。</p>\n<p>比如，有一个 <code>Department（部门）</code> 类，它有一个针对 <code>Employee（雇员）</code> 类的 to-many 关系，<code>Employee</code>类有 <code>salary（薪资）</code>属性。你希望 <code>Department</code>类有一个 <code>totalSalary</code> 属性来计算所有员工的薪水，也就是 <code>Department的totalSalary</code> 依赖于所有 <code>Employee的salary</code> 属性。你不能通过实现 <code>keyPathsForValuesAffectingTotalSalary</code> 方法并返回 <code>employees.salary</code>。</p>\n<p>你可以用KVO将<code>parent</code>（比如Department）作为所有<code>children</code>（比如Employee）相关属性的观察者。你必须在把child添加或删除到parent时也把parent作为child的观察者添加或删除。在<code>observeValueForKeyPath:ofObject:change:context:</code>方法中我们可以针对被依赖项的变更来更新依赖项的值：</p>\n<pre><code>- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {\n\n    if (context == totalSalaryContext) {\n        [self updateTotalSalary];\n    }\n    else\n    // deal with other observations and/or invoke super...\n}\n\n- (void)updateTotalSalary {\n    [self setTotalSalary:[self valueForKeyPath:@&quot;employees.@sum.salary&quot;]];\n}\n\n- (void)setTotalSalary:(NSNumber *)newTotalSalary {\n\n    if (totalSalary != newTotalSalary) {\n        [self willChangeValueForKey:@&quot;totalSalary&quot;];\n        _totalSalary = newTotalSalary;\n        [self didChangeValueForKey:@&quot;totalSalary&quot;];\n    }\n}\n\n- (NSNumber *)totalSalary {\n    return _totalSalary;\n}\n复制代码</code></pre><p>将 Department 实例对象注册为观察者，然后观察对象为 totalSalary 属性，但是在通知回调中会手动调用 totalSalary 属性的 setter 方法，并且传入值是通过 KVC 的集合运算符的方式取出 employees 属性所对应的集合中所有 sum 值之和。然后在 totalSalary 属性的 setter 方法中，会相应的调用 willChangeValueForKey: 和 didChangeValueForKey: 方法。</p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p><img src=\"//wizhiai.github.io/2020/04/24/kvo/171a512df9918245.jpg\" alt=\"171a512df9918245 \"></p>\n<p>KVO的流程图</p>\n<h1 id=\"一-KVO的定义\"><a href=\"#一-KVO的定义\" class=\"headerlink\" title=\"一. KVO的定义\"></a>一. KVO的定义</h1><blockquote>\n<p><code>Key-value observing</code> is a mechanism that allows objects to be notified of changes to specified properties of other objects.</p>\n</blockquote>\n<p><code>KVO (Key-value observing)</code> 是一个非正式协议，允许对象在其他对象的指定属性发生更改时得到通知。iOS开发者可以使用<code>KVO</code> 来检测对象属性的变化、快速做出响应，这能够为我们在开发强交互、响应式应用以及实现视图和模型的双向绑定时提供大量的帮助。</p>\n<blockquote>\n<p>KVO’s primary benefit is that you don’t have to implement your own scheme to send notifications every time a property changes. Its well-defined infrastructure has framework-level support that makes it easy to adopt—typically you do not have to add any code to your project. In addition, the infrastructure is already full-featured, which makes it easy to support multiple observers for a single property, as well as dependent values.</p>\n</blockquote>\n<p><code>KVO</code>的主要好处是，不必在每次属性更改时都实现自己的方案来发送通知。这个过程大部分是内建的，自动的，透明的。这使得采用它很容易，通常您不必向项目中添加任何代码。此外，KVO支持单个属性添加多个观察者以及依赖值。</p>\n<h1 id=\"二-注册KVO-–-Registering-for-Key-Value-Observing\"><a href=\"#二-注册KVO-–-Registering-for-Key-Value-Observing\" class=\"headerlink\" title=\"二. 注册KVO – Registering for Key-Value Observing\"></a>二. 注册KVO – Registering for Key-Value Observing</h1><h2 id=\"2-1-注册观察者-–-Registering-as-an-Observer\"><a href=\"#2-1-注册观察者-–-Registering-as-an-Observer\" class=\"headerlink\" title=\"2.1 注册观察者 – Registering as an Observer\"></a>2.1 注册观察者 – Registering as an Observer</h2><pre><code>- (void)addObserver:(NSObject *)observer\n         forKeyPath:(NSString *)keyPath\n            options:(NSKeyValueObservingOptions)options\n            context:(void *)context;\n复制代码</code></pre><ul>\n<li><code>observer</code>: 注册 KVO 通知的对象。观察者必须实现 <code>key-value observing</code> 方法 - <code>observeValueForKeyPath:ofObject:change:context:</code>。</li>\n<li><code>keyPath</code>: 被观察者的属性的 <code>keypath</code>，相对于接受者，值不能是 nil。</li>\n<li><code>options</code>: 代表 <code>NSKeyValueObservingOptions</code> 的位掩码，它指定了观察通知中包含了什么</li>\n<li><code>context</code> :在 <code>observeValueForKeyPath:ofObject:change:context:</code> 传给 <code>observer</code> 参数的上下文</li>\n</ul>\n<h3 id=\"2-1-1-更好的-keyPath\"><a href=\"#2-1-1-更好的-keyPath\" class=\"headerlink\" title=\"2.1.1 更好的 keyPath\"></a>2.1.1 更好的 keyPath</h3><p>传字符串做为 keypath 比直接使用属性更糟糕，因为任何错字或者拼写错误都不会被编译器察觉，最终导致不能正常工作。 一个聪明的解决方案是使用 <code>NSStringFromSelector</code> 和一个 <code>@selector</code> 字面值:</p>\n<pre><code>NSStringFromSelector(@selector(isFinished))\n复制代码</code></pre><p>因为 <code>@selector</code> 检查目标中的所有可用 <code>selector</code>，这并不能阻止所有的错误，但它可以用来捕获大部分改变。</p>\n<h3 id=\"2-1-2-更好的-context\"><a href=\"#2-1-2-更好的-context\" class=\"headerlink\" title=\"2.1.2 更好的 context\"></a>2.1.2 更好的 context</h3><p>关于context，苹果官方文档也做了精彩的注释。</p>\n<blockquote>\n<p>The context pointer in the addObserver:forKeyPath:options:context: message contains arbitrary data that will be passed back to the observer in the corresponding change notifications. You may specify NULL and rely entirely on the key path string to determine the origin of a change notification, but this approach may cause problems for an object whose superclass is also observing the same key path for different reasons.</p>\n</blockquote>\n<p><code>context</code> 中包含着将在相应的更改通知中传递回观察员的任意数据。您可以指定NULL并完全依赖于<code>keyPath</code>确定更改通知的来源。但是这种方法可能出现问题：<strong>尤其是处理那些继承自同一个父类的子类，并且这些子类有相同的 <code>keypath</code>。</strong></p>\n<blockquote>\n<p>A safer and more extensible approach is to use the context to ensure notifications you receive are destined for your observer and not a superclass.</p>\n</blockquote>\n<p>一种更安全、更可扩展的方法是：使用<code>context</code>来确保接收到的通知是发送给观察者的，而不是发送给超类。 如何设置一个好的 <code>content</code> 呢？苹果官方文档也给出了推荐的方法。</p>\n<pre><code>//  a Person instance registers itself as an observer for an Account instance’s\n// 大体意思就是：一个静态变量存着它自己的指针。这意味着它自己什么也没有。\nstatic void *PersonAccountBalanceContext = &amp;PersonAccountBalanceContext;\nstatic void *PersonAccountInterestRateContext = &amp;PersonAccountInterestRateContext;\n\n- (void)registerAsObserverForAccount:(Account*)account {\n    [account addObserver:self\n              forKeyPath:@&quot;balance&quot;\n                 options:(NSKeyValueObservingOptionNew |\n                          NSKeyValueObservingOptionOld)\n                 context:PersonAccountBalanceContext];\n\n    [account addObserver:self\n              forKeyPath:@&quot;interestRate&quot;\n                 options:(NSKeyValueObservingOptionNew |\n                          NSKeyValueObservingOptionOld)\n                  context:PersonAccountInterestRateContext];\n}\n复制代码</code></pre><h2 id=\"2-2-接受变化-–-Receiving-Notification-of-a-Change\"><a href=\"#2-2-接受变化-–-Receiving-Notification-of-a-Change\" class=\"headerlink\" title=\"2.2 接受变化 – Receiving Notification of a Change\"></a>2.2 接受变化 – Receiving Notification of a Change</h2><pre><code>- (void)observeValueForKeyPath:(NSString *)keyPath\n                      ofObject:(id)object\n                        change:(NSDictionary *)change\n                       context:(void *)context {\n\n    if (context == PersonAccountBalanceContext) {\n        // Do something with the balance…\n\n    } else if (context == PersonAccountInterestRateContext) {\n        // Do something with the interest rate…\n\n    } else {\n        // Any unrecognized context must belong to super\n        [super observeValueForKeyPath:keyPath\n                             ofObject:object\n                               change:change\n                               context:context];\n    }\n}\n复制代码</code></pre><h2 id=\"2-3-移除观察者-–-Removing-an-Object-as-an-Observer\"><a href=\"#2-3-移除观察者-–-Removing-an-Object-as-an-Observer\" class=\"headerlink\" title=\"2.3 移除观察者 – Removing an Object as an Observer\"></a>2.3 移除观察者 – Removing an Object as an Observer</h2><p>苹果官方文档推荐在 <code>init</code> 或 <code>viewDidLoad</code> add观察者，在 <code>dealloc</code> 里移除观察者, 保证 <code>add</code> 和 <code>remove</code> 是成对出现的。</p>\n<pre><code>- (void)unregisterAsObserverForAccount:(Account*)account {\n    [account removeObserver:self\n                 forKeyPath:@&quot;balance&quot;\n                    context:PersonAccountBalanceContext];\n\n    [account removeObserver:self\n                 forKeyPath:@&quot;interestRate&quot;\n                    context:PersonAccountInterestRateContext];\n}\n复制代码</code></pre><h3 id=\"更好的remove\"><a href=\"#更好的remove\" class=\"headerlink\" title=\"更好的remove\"></a>更好的remove</h3><p>调用 <code>–removeObserver:forKeyPath:context:</code>时， 当这个对象没有被注册为观察者（因为它已经解注册了或者开始没有注册），会抛出一个异常。有意思的是，没有一个内建的方式来检查对象是否注册。 苹果官方文档推荐使用： <code>@try</code> / <code>@catch</code> 移除观察者。</p>\n<pre><code>- (void)dealloc {\n    @try {\n        // 3. unsubscribe\n        [_account removeObserver:self\n                      forKeyPath:NSStringFromSelector(@selector(contentSize))\n                         context:ContentSizeContext];\n    }\n    @catch (NSException *exception) {\n\n    }\n}\n复制代码</code></pre><h1 id=\"三-KVO兼容-–-KVO-Compliance\"><a href=\"#三-KVO兼容-–-KVO-Compliance\" class=\"headerlink\" title=\"三. KVO兼容 – KVO Compliance\"></a>三. KVO兼容 – KVO Compliance</h1><blockquote>\n<p>To use KVO, first you must ensure that the observed object, the Account in this case, is KVO compliant. Typically, if your objects inherit from NSObject and you create properties in the usual way, your objects and their properties will automatically be KVO Compliant. It is also possible to implement compliance manually. KVO Compliance describes the difference between automatic and manual key-value observing, and how to implement both.</p>\n</blockquote>\n<p>要使用<code>KVO</code>，首先必须确保被观察的对象符合<code>KVO</code>。通常，如果您的对象继承自<code>NSObject</code>，并且您以通常的方式创建属性，那么您的对象及其属性将自动与<code>KVO</code>兼容。当然，也可以手动实现遵从性。<code>KVO Compliance</code>讲述述了自动和手动键值观察之间的区别，以及如何实现两者。</p>\n<p>可以通过复写 <code>automaticallyNotifiesObserversForKey:</code> 的返回值，选择自动退出 KVO。同时该类方法还能完成控制特定属性的目的。</p>\n<pre><code>+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)theKey {\n\n    BOOL automatic = NO;\n    if ([theKey isEqualToString:@&quot;balance&quot;]) {\n        automatic = NO;\n    } else {\n        automatic = [super automaticallyNotifiesObserversForKey:theKey];\n    }\n    return automatic;\n}\n复制代码</code></pre><h2 id=\"3-1-自动KVO-–-Automatic-Change-Notification\"><a href=\"#3-1-自动KVO-–-Automatic-Change-Notification\" class=\"headerlink\" title=\"3.1 自动KVO – Automatic Change Notification\"></a>3.1 自动KVO – Automatic Change Notification</h2><pre><code>// Call the accessor method.\n[account setName:@&quot;Savings&quot;];\n\n// Use setValue:forKey:.\n[account setValue:@&quot;Savings&quot; forKey:@&quot;name&quot;];\n\n// Use a key path, where &#39;account&#39; is a kvc-compliant property of &#39;document&#39;.\n[document setValue:@&quot;Savings&quot; forKeyPath:@&quot;account.name&quot;];\n\n// Use mutableArrayValueForKey: to retrieve a relationship proxy object.\nTransaction *newTransaction = &lt;#Create a new transaction for the account#&gt;;\nNSMutableArray *transactions = [account mutableArrayValueForKey:@&quot;transactions&quot;];\n[transactions addObject:newTransaction];\n复制代码</code></pre><p><strong>注：</strong> 可不数组直接addObject不会触发kvc，所以也不会触发kvo</p>\n<h2 id=\"3-2-手动KVO-–-Manual-Change-Notification\"><a href=\"#3-2-手动KVO-–-Manual-Change-Notification\" class=\"headerlink\" title=\"3.2 手动KVO – Manual Change Notification\"></a>3.2 手动KVO – Manual Change Notification</h2><p>手动 KVO 可以帮助我们将多个属性值的更改合并成一个，这样在回调的时候就有一次了，同时也能最大程度地减少处于应用程序特定原因而导致的通知发生。</p>\n<ul>\n<li>要实现手动观察者通知，请在更改值之前调用<code>willChangeValueForKey</code>，在更改值之后调用<code>didChangeValueForKey</code></li>\n</ul>\n<pre><code>- (void)setBalance:(double)theBalance {\n    [self willChangeValueForKey:@&quot;balance&quot;];\n    _balance = theBalance;\n    [self didChangeValueForKey:@&quot;balance&quot;];\n}\n复制代码</code></pre><ul>\n<li>为了性能最佳，通过检查值是否发生变化，最小化发送不必要的通知</li>\n</ul>\n<pre><code>- (void)setBalance:(double)theBalance {\n    if (theBalance != _balance) {\n        [self willChangeValueForKey:@&quot;balance&quot;];\n        _balance = theBalance;\n        [self didChangeValueForKey:@&quot;balance&quot;];\n    }\n}\n复制代码</code></pre><ul>\n<li>如果一个操作导致多个键发生更改，应该这样更改</li>\n</ul>\n<pre><code>- (void)setBalance:(double)theBalance {\n    [self willChangeValueForKey:@&quot;balance&quot;];\n    [self willChangeValueForKey:@&quot;itemChanged&quot;];\n    _balance = theBalance;\n    _itemChanged = _itemChanged+1;\n    [self didChangeValueForKey:@&quot;itemChanged&quot;];\n    [self didChangeValueForKey:@&quot;balance&quot;];\n}\n复制代码</code></pre><ul>\n<li>对于有序的一对多关系属性，不仅必须指定已更改的键，还必须指定更改的类型和所涉及对象的索引。 更改的类型是 <code>NSKeyValueChange</code>（ <code>NSKeyValueChangeInsertion</code>，<code>NSKeyValueChangeRemoval</code> 或 <code>NSKeyValueChangeReplacement</code>），受影响的对象的索引用 <code>NSIndexSet</code> 对象</li>\n</ul>\n<pre><code>- (void)removeTransactionsAtIndexes:(NSIndexSet *)indexes {\n    [self willChange:NSKeyValueChangeRemoval\n        valuesAtIndexes:indexes forKey:@&quot;transactions&quot;];\n\n    // Remove the transaction objects at the specified indexes.\n\n    [self didChange:NSKeyValueChangeRemoval\n        valuesAtIndexes:indexes forKey:@&quot;transactions&quot;];\n}\n复制代码</code></pre><h1 id=\"四-注册依赖键-–-Registering-Dependent-Keys\"><a href=\"#四-注册依赖键-–-Registering-Dependent-Keys\" class=\"headerlink\" title=\"四. 注册依赖键 – Registering Dependent Keys\"></a>四. 注册依赖键 – Registering Dependent Keys</h1><p>有一些属性的值取决于一个或者多个其他对象的属性值，一旦某个被依赖的属性值变了，依赖它的属性的变化也需要被通知。</p>\n<h2 id=\"4-1-To-One-Relationships\"><a href=\"#4-1-To-One-Relationships\" class=\"headerlink\" title=\"4.1 To-One Relationships\"></a>4.1 To-One Relationships</h2><p>要自动触发 <code>To-One</code> 关系，有两种方法：</p>\n<ul>\n<li>重写 <code>keyPathsForValuesAffectingValueForKey:</code>方法</li>\n<li>定义名称为 <code>keyPathsForValuesAffecting</code> 的方法。</li>\n</ul>\n<p>举个例子： 一个人的全名 fullName 是由 firstName 和 lastName 组成的，一个观察 fullName 的程序在 firstName 或者 lastName 变化时也应该接收到通知。</p>\n<pre><code>- (NSString *)fullName\n{\n    return [NSString stringWithFormat:@&quot;%@ %@&quot;,firstName, lastName];\n}\n复制代码</code></pre><ol>\n<li>方法一：重写 <code>keyPathsForValuesAffectingValueForKey:</code>方法, 来表明 fullname 属性是依赖于 firstname 和 lastname 的：</li>\n</ol>\n<pre><code>+ (NSSet *)keyPathsForValuesAffectingValueForKey:(NSString *)key {\n\n    NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];\n\n    if ([key isEqualToString:@&quot;fullName&quot;]) {\n        NSArray *affectingKeys = @[@&quot;lastName&quot;, @&quot;firstName&quot;];\n        keyPaths = [keyPaths setByAddingObjectsFromArray: affectingKeys];\n    }\n    return keyPaths;\n}\n复制代码</code></pre><p>相当于在影响 fullName 值的 keypath 中新加了两个key：lastName 和 firstName，很容易理解。</p>\n<p>值得注意的是：需要先对父类发送 <code>keyPathsForValuesAffectingValueForKey</code> 消息，以免干扰父类中对此方法的重写</p>\n<ol>\n<li>方法二：实现一个遵循命名方式为keyPathsForValuesAffecting的类方法，是依赖于其他值的属性名（首字母大写）</li>\n</ol>\n<pre><code>+ (NSSet *)keyPathsForValuesAffectingFullName\n{\n    return [NSSet setWithObjects:@&quot;lastName&quot;, @&quot;firstName&quot;, nil];\n}\n复制代码</code></pre><p>如果在分类中，使用 <code>keyPathsForValuesAffectingFullName</code> 更合理，因为分类中是不允许重载方法的，所以 <code>keyPathsForValuesAffectingValueForKey</code> 方法肯定是不能在分类中使用的。</p>\n<h2 id=\"4-2-To-many-Relationships\"><a href=\"#4-2-To-many-Relationships\" class=\"headerlink\" title=\"4.2 To-many Relationships\"></a>4.2 To-many Relationships</h2><p><code>keyPathsForValuesAffectingValueForKey:</code>方法不支持包含 <code>to-many</code> 关系的 <code>keypath</code> 。</p>\n<p>比如，有一个 <code>Department（部门）</code> 类，它有一个针对 <code>Employee（雇员）</code> 类的 to-many 关系，<code>Employee</code>类有 <code>salary（薪资）</code>属性。你希望 <code>Department</code>类有一个 <code>totalSalary</code> 属性来计算所有员工的薪水，也就是 <code>Department的totalSalary</code> 依赖于所有 <code>Employee的salary</code> 属性。你不能通过实现 <code>keyPathsForValuesAffectingTotalSalary</code> 方法并返回 <code>employees.salary</code>。</p>\n<p>你可以用KVO将<code>parent</code>（比如Department）作为所有<code>children</code>（比如Employee）相关属性的观察者。你必须在把child添加或删除到parent时也把parent作为child的观察者添加或删除。在<code>observeValueForKeyPath:ofObject:change:context:</code>方法中我们可以针对被依赖项的变更来更新依赖项的值：</p>\n<pre><code>- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {\n\n    if (context == totalSalaryContext) {\n        [self updateTotalSalary];\n    }\n    else\n    // deal with other observations and/or invoke super...\n}\n\n- (void)updateTotalSalary {\n    [self setTotalSalary:[self valueForKeyPath:@&quot;employees.@sum.salary&quot;]];\n}\n\n- (void)setTotalSalary:(NSNumber *)newTotalSalary {\n\n    if (totalSalary != newTotalSalary) {\n        [self willChangeValueForKey:@&quot;totalSalary&quot;];\n        _totalSalary = newTotalSalary;\n        [self didChangeValueForKey:@&quot;totalSalary&quot;];\n    }\n}\n\n- (NSNumber *)totalSalary {\n    return _totalSalary;\n}\n复制代码</code></pre><p>将 Department 实例对象注册为观察者，然后观察对象为 totalSalary 属性，但是在通知回调中会手动调用 totalSalary 属性的 setter 方法，并且传入值是通过 KVC 的集合运算符的方式取出 employees 属性所对应的集合中所有 sum 值之和。然后在 totalSalary 属性的 setter 方法中，会相应的调用 willChangeValueForKey: 和 didChangeValueForKey: 方法。</p>\n"},{"title":"十大经典排序算法整理汇总（附代码）","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-16T07:09:23.000Z","password":null,"summary":"本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。","_content":"\n> 关注公众号【算法码上来】，每日算法干货马上就来！\n\n![](/medias/contact.jpg)\n\n## 前言\n\n本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\n\n**本文并不会详细讲解每种排序算法的原理**，网上有很多很好的教程，大家可以自己去搜了看。\n\n最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 [LeetCode 912. 排序数组](https://leetcode-cn.com/problems/sort-an-array/ \"LeetCode 912. 排序数组\") 这道题。\n\n## 性质汇总\n\n> 如果发现表中有错误，请留言告知。\n\n|   算法  |   最好  |  最坏   |  平均   |  空间   |  稳定性   | 是否基于比较\n| --- | --- | --- | --- | --- | :---: | :---: |\n|  冒泡排序   |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|   选择排序  |  $O(n^2)$  |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\times$  | $\\checkmark$ |\n|   插入排序  |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|  快速排序   |  $O(n\\log n)$   |  $O(n^2)$   |  $O(n\\log n)$   |  $O(\\log n)$~$O(n)$   |  $\\times$   | $\\checkmark$ |\n|  归并排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(n)$  |  $\\checkmark$   | $\\checkmark$ |\n|   希尔排序  |  $O(n^{1.3})$   |   $O(n^2)$  |  $O(n\\log n)$~$O(n^2)$   |  $O(1)$   | $\\times$    | $\\checkmark$ |\n|  计数排序   |  $O(n+k)$   |   $O(n+k)$  |   $O(n+k)$  |  $O(n+k)$   |  $\\checkmark$   | $\\times$ |\n|   基数排序  |   $O(nk)$  |  $O(nk)$   |   $O(nk)$  |   $O(n+k)$  |  $\\checkmark$   | $\\times$ |\n|  桶排序   |   $O(n)$  |   $O(n)$  |   $O(n)$  |  $O(n+m)$   |  $\\checkmark$   | $\\times$ |\n|  堆排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(1)$  |  $\\times$   | $\\checkmark$ |\n\n\n\n> 如果表格显示有问题的话，还可以直接看下面的汇总图：\n\n![十大经典排序算法性质汇总](1.png)\n\n### 维基百科\n\n我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。\n\n**冒泡排序**  \n[https://en.wikipedia.org/wiki/Bubble_sort](https://en.wikipedia.org/wiki/Bubble_sort)\n\n**选择排序**  \n[https://en.wikipedia.org/wiki/Selection_sort](https://en.wikipedia.org/wiki/Selection_sort)\n\n**插入排序**  \n[https://en.wikipedia.org/wiki/Insertion_sort](https://en.wikipedia.org/wiki/Insertion_sort)\n\n**快速排序**  \n[https://en.wikipedia.org/wiki/Quicksort](https://en.wikipedia.org/wiki/Quicksort)\n\n**归并排序**  \n[https://en.wikipedia.org/wiki/Merge_sort](https://en.wikipedia.org/wiki/Merge_sort)\n\n**希尔排序**  \n[https://en.wikipedia.org/wiki/Shellsort](https://en.wikipedia.org/wiki/Shellsort)\n\n**计数排序**  \n[https://en.wikipedia.org/wiki/Counting_sort](https://en.wikipedia.org/wiki/Counting_sort)\n\n**基数排序**  \n[https://en.wikipedia.org/wiki/Radix_sort](https://en.wikipedia.org/wiki/Radix_sort)\n\n**桶排序**  \n[https://en.wikipedia.org/wiki/Bucket_sort](https://en.wikipedia.org/wiki/Bucket_sort)\n\n**堆排序**  \n[https://en.wikipedia.org/wiki/Heapsort](https://en.wikipedia.org/wiki/Heapsort)\n\n## 代码实现\n\n所有的排序算法接口都是相同的，也就是 `vector<int> xxxSort(vector<int>& nums)` 。只需要你传入一个 `vector<int>` 类型的数组，就能返回排序后的结果。\n\n运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。\n\n```cpp\nclass Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        return quickSort(nums);\n    }\n\n    // 冒泡排序（超时）\n    vector<int> bubbleSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = n-2; j >= i; --j) {\n                if (nums[j] > nums[j+1]) {\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 选择排序（超时）\n    vector<int> selectSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            int idx = i;\n            for (int j = i; j < n; ++j) {\n                if (nums[j] < nums[idx]) {\n                    idx = j;\n                }\n            }\n            swap(nums[i], nums[idx]);\n        }\n        return nums;\n    }\n\n    // 插入排序（超时）\n    vector<int> insertSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j > 0 && nums[j] < nums[j-1]; --j) {\n                swap(nums[j], nums[j-1]);\n            }\n        }\n        return nums;\n    }\n\n    // 快速排序（24 ms）\n    void qSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return;\n        int m = l;\n        for (int i = l; i < r; ++i) {\n            if (nums[i] < nums[r]) {\n                swap(nums[m++], nums[i]);\n            }\n        }\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    }\n\n    vector<int> quickSort(vector<int>& nums) {\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序（192 ms）\n    vector<int> mSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return {nums[l]};\n        int m = l+(r-l)/2;\n        vector<int> lnums = mSort(nums, l, m);\n        vector<int> rnums = mSort(nums, m+1, r);\n        vector<int> res;\n        int i = 0, j = 0;\n        while (i <= m-l && j <= r-m-1) {\n            if (lnums[i] < rnums[j]) {\n                res.push_back(lnums[i++]);\n            } else {\n                res.push_back(rnums[j++]);\n            }\n        }\n        while (i <= m-l) {\n            res.push_back(lnums[i++]);\n        }\n        while (j <= r-m-1) {\n            res.push_back(rnums[j++]);\n        }\n        return res;\n    }\n\n    vector<int> mergeSort(vector<int>& nums) {\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序 + 非递归（80 ms）\n    vector<int> mergeSortNR(vector<int>& nums) {\n        int n = nums.size();\n        for (int len = 1; len < n; len <<= 1) {\n            for (int l = 0; l < n-len; l += 2*len) {\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector<int> res;\n                int i = l, j = m+1;\n                while (i <= m && j <= r) {\n                    if (nums[i] < nums[j]) {\n                        res.push_back(nums[i++]);\n                    } else {\n                        res.push_back(nums[j++]);\n                    }\n                }\n                while (i <= m) {\n                    res.push_back(nums[i++]);\n                }\n                while (j <= r) {\n                    res.push_back(nums[j++]);\n                }\n                for (int i = l; i <= r; ++i) {\n                    nums[i] = res[i-l];\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 希尔排序（40 ms）\n    vector<int> shellSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; ++i) {\n                for (int j = i; j-gap >= 0 && nums[j-gap] > nums[j]; j -= gap) {\n                    swap(nums[j-gap], nums[j]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 计数排序（32 ms）\n    vector<int> countSort(vector<int>& nums) {\n        int n = nums.size();\n        if (!n) return {};\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector<int> count(m, 0);\n        for (int i = 0; i < n; ++i) {\n            count[nums[i]-minv]++;\n        }\n        vector<int> res;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < count[i]; ++j) {\n                res.push_back(i+minv);\n            }\n        }\n        return res;\n    }\n\n    // 基数排序（不适用于负数）\n    vector<int> radixSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv > 0) {\n            maxv /= 10;\n            maxd++;\n        }\n        vector<int> count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd > 0) {\n            count.assign(10, 0);\n            for (int i = 0; i < n; ++i) {\n                count[(nums[i]/base)%10]++;\n            }\n            for (int i = 1; i < 10; ++i) {\n                count[i] += count[i-1];\n            }\n            for (int i = n-1; i >= 0; --i) {\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            }\n            for (int i = 0; i < n; ++i) {\n                nums[i] = rank[i];\n            }\n            maxd--;\n            base *= 10;\n        }\n        return nums;\n    }\n\n    // 桶排序 (20 ms)\n    vector<int> bucketSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector<vector<int> > bucket(m);\n        for (int i = 0; i < n; ++i) {\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        }\n        int idx = 0;\n        for (int i = 0; i < m; ++i) {\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j < sz; ++j) {\n                nums[idx++] = bucket[i][j];\n            }\n        }\n        return nums;\n    }\n\n    // 堆排序（32 ms）\n    void adjust(vector<int>& nums, int p, int s) {\n        while (2*p+1 < s) {\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2<s && nums[c2]>nums[c1]) ? c2 : c1;\n            if (nums[c] > nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        }\n    }\n\n    vector<int> heapSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = n/2-1; i >= 0; --i) {\n            adjust(nums, i, n);\n        }\n        for (int i = n-1; i > 0; --i) {\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        }\n        return nums;\n    }\n};\n```","source":"_posts/sort-algorithms.md","raw":"---\ntitle: 十大经典排序算法整理汇总（附代码）\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-16 15:09:23\npassword:\nsummary: 本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\ntags:\n- leetcode\n- 算法\ncategories:\n- 编程算法\n---\n\n> 关注公众号【算法码上来】，每日算法干货马上就来！\n\n![](/medias/contact.jpg)\n\n## 前言\n\n本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\n\n**本文并不会详细讲解每种排序算法的原理**，网上有很多很好的教程，大家可以自己去搜了看。\n\n最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 [LeetCode 912. 排序数组](https://leetcode-cn.com/problems/sort-an-array/ \"LeetCode 912. 排序数组\") 这道题。\n\n## 性质汇总\n\n> 如果发现表中有错误，请留言告知。\n\n|   算法  |   最好  |  最坏   |  平均   |  空间   |  稳定性   | 是否基于比较\n| --- | --- | --- | --- | --- | :---: | :---: |\n|  冒泡排序   |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|   选择排序  |  $O(n^2)$  |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\times$  | $\\checkmark$ |\n|   插入排序  |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|  快速排序   |  $O(n\\log n)$   |  $O(n^2)$   |  $O(n\\log n)$   |  $O(\\log n)$~$O(n)$   |  $\\times$   | $\\checkmark$ |\n|  归并排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(n)$  |  $\\checkmark$   | $\\checkmark$ |\n|   希尔排序  |  $O(n^{1.3})$   |   $O(n^2)$  |  $O(n\\log n)$~$O(n^2)$   |  $O(1)$   | $\\times$    | $\\checkmark$ |\n|  计数排序   |  $O(n+k)$   |   $O(n+k)$  |   $O(n+k)$  |  $O(n+k)$   |  $\\checkmark$   | $\\times$ |\n|   基数排序  |   $O(nk)$  |  $O(nk)$   |   $O(nk)$  |   $O(n+k)$  |  $\\checkmark$   | $\\times$ |\n|  桶排序   |   $O(n)$  |   $O(n)$  |   $O(n)$  |  $O(n+m)$   |  $\\checkmark$   | $\\times$ |\n|  堆排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(1)$  |  $\\times$   | $\\checkmark$ |\n\n\n\n> 如果表格显示有问题的话，还可以直接看下面的汇总图：\n\n![十大经典排序算法性质汇总](1.png)\n\n### 维基百科\n\n我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。\n\n**冒泡排序**  \n[https://en.wikipedia.org/wiki/Bubble_sort](https://en.wikipedia.org/wiki/Bubble_sort)\n\n**选择排序**  \n[https://en.wikipedia.org/wiki/Selection_sort](https://en.wikipedia.org/wiki/Selection_sort)\n\n**插入排序**  \n[https://en.wikipedia.org/wiki/Insertion_sort](https://en.wikipedia.org/wiki/Insertion_sort)\n\n**快速排序**  \n[https://en.wikipedia.org/wiki/Quicksort](https://en.wikipedia.org/wiki/Quicksort)\n\n**归并排序**  \n[https://en.wikipedia.org/wiki/Merge_sort](https://en.wikipedia.org/wiki/Merge_sort)\n\n**希尔排序**  \n[https://en.wikipedia.org/wiki/Shellsort](https://en.wikipedia.org/wiki/Shellsort)\n\n**计数排序**  \n[https://en.wikipedia.org/wiki/Counting_sort](https://en.wikipedia.org/wiki/Counting_sort)\n\n**基数排序**  \n[https://en.wikipedia.org/wiki/Radix_sort](https://en.wikipedia.org/wiki/Radix_sort)\n\n**桶排序**  \n[https://en.wikipedia.org/wiki/Bucket_sort](https://en.wikipedia.org/wiki/Bucket_sort)\n\n**堆排序**  \n[https://en.wikipedia.org/wiki/Heapsort](https://en.wikipedia.org/wiki/Heapsort)\n\n## 代码实现\n\n所有的排序算法接口都是相同的，也就是 `vector<int> xxxSort(vector<int>& nums)` 。只需要你传入一个 `vector<int>` 类型的数组，就能返回排序后的结果。\n\n运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。\n\n```cpp\nclass Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        return quickSort(nums);\n    }\n\n    // 冒泡排序（超时）\n    vector<int> bubbleSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = n-2; j >= i; --j) {\n                if (nums[j] > nums[j+1]) {\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 选择排序（超时）\n    vector<int> selectSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            int idx = i;\n            for (int j = i; j < n; ++j) {\n                if (nums[j] < nums[idx]) {\n                    idx = j;\n                }\n            }\n            swap(nums[i], nums[idx]);\n        }\n        return nums;\n    }\n\n    // 插入排序（超时）\n    vector<int> insertSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j > 0 && nums[j] < nums[j-1]; --j) {\n                swap(nums[j], nums[j-1]);\n            }\n        }\n        return nums;\n    }\n\n    // 快速排序（24 ms）\n    void qSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return;\n        int m = l;\n        for (int i = l; i < r; ++i) {\n            if (nums[i] < nums[r]) {\n                swap(nums[m++], nums[i]);\n            }\n        }\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    }\n\n    vector<int> quickSort(vector<int>& nums) {\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序（192 ms）\n    vector<int> mSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return {nums[l]};\n        int m = l+(r-l)/2;\n        vector<int> lnums = mSort(nums, l, m);\n        vector<int> rnums = mSort(nums, m+1, r);\n        vector<int> res;\n        int i = 0, j = 0;\n        while (i <= m-l && j <= r-m-1) {\n            if (lnums[i] < rnums[j]) {\n                res.push_back(lnums[i++]);\n            } else {\n                res.push_back(rnums[j++]);\n            }\n        }\n        while (i <= m-l) {\n            res.push_back(lnums[i++]);\n        }\n        while (j <= r-m-1) {\n            res.push_back(rnums[j++]);\n        }\n        return res;\n    }\n\n    vector<int> mergeSort(vector<int>& nums) {\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序 + 非递归（80 ms）\n    vector<int> mergeSortNR(vector<int>& nums) {\n        int n = nums.size();\n        for (int len = 1; len < n; len <<= 1) {\n            for (int l = 0; l < n-len; l += 2*len) {\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector<int> res;\n                int i = l, j = m+1;\n                while (i <= m && j <= r) {\n                    if (nums[i] < nums[j]) {\n                        res.push_back(nums[i++]);\n                    } else {\n                        res.push_back(nums[j++]);\n                    }\n                }\n                while (i <= m) {\n                    res.push_back(nums[i++]);\n                }\n                while (j <= r) {\n                    res.push_back(nums[j++]);\n                }\n                for (int i = l; i <= r; ++i) {\n                    nums[i] = res[i-l];\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 希尔排序（40 ms）\n    vector<int> shellSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; ++i) {\n                for (int j = i; j-gap >= 0 && nums[j-gap] > nums[j]; j -= gap) {\n                    swap(nums[j-gap], nums[j]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 计数排序（32 ms）\n    vector<int> countSort(vector<int>& nums) {\n        int n = nums.size();\n        if (!n) return {};\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector<int> count(m, 0);\n        for (int i = 0; i < n; ++i) {\n            count[nums[i]-minv]++;\n        }\n        vector<int> res;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < count[i]; ++j) {\n                res.push_back(i+minv);\n            }\n        }\n        return res;\n    }\n\n    // 基数排序（不适用于负数）\n    vector<int> radixSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv > 0) {\n            maxv /= 10;\n            maxd++;\n        }\n        vector<int> count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd > 0) {\n            count.assign(10, 0);\n            for (int i = 0; i < n; ++i) {\n                count[(nums[i]/base)%10]++;\n            }\n            for (int i = 1; i < 10; ++i) {\n                count[i] += count[i-1];\n            }\n            for (int i = n-1; i >= 0; --i) {\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            }\n            for (int i = 0; i < n; ++i) {\n                nums[i] = rank[i];\n            }\n            maxd--;\n            base *= 10;\n        }\n        return nums;\n    }\n\n    // 桶排序 (20 ms)\n    vector<int> bucketSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector<vector<int> > bucket(m);\n        for (int i = 0; i < n; ++i) {\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        }\n        int idx = 0;\n        for (int i = 0; i < m; ++i) {\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j < sz; ++j) {\n                nums[idx++] = bucket[i][j];\n            }\n        }\n        return nums;\n    }\n\n    // 堆排序（32 ms）\n    void adjust(vector<int>& nums, int p, int s) {\n        while (2*p+1 < s) {\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2<s && nums[c2]>nums[c1]) ? c2 : c1;\n            if (nums[c] > nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        }\n    }\n\n    vector<int> heapSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = n/2-1; i >= 0; --i) {\n            adjust(nums, i, n);\n        }\n        for (int i = n-1; i > 0; --i) {\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        }\n        return nums;\n    }\n};\n```","slug":"sort-algorithms","published":1,"updated":"2020-04-05T02:43:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5ub0007nfayz5vztbrq","content":"<blockquote>\n<p>关注公众号【算法码上来】，每日算法干货马上就来！</p>\n</blockquote>\n<p><img src=\"/medias/contact.jpg\" alt></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p>\n<p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p>\n<p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href=\"https://leetcode-cn.com/problems/sort-an-array/\" title=\"LeetCode 912. 排序数组\" target=\"_blank\" rel=\"noopener\">LeetCode 912. 排序数组</a> 这道题。</p>\n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2><blockquote>\n<p>如果发现表中有错误，请留言告知。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n<th>空间</th>\n<th align=\"center\">稳定性</th>\n<th align=\"center\">是否基于比较</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(\\log n)$~$O(n)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>$O(n^{1.3})$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$~$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n+m)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p>\n</blockquote>\n<p><img src=\"//wizhiai.github.io/2020/02/16/sort-algorithms/1.png\" alt=\"十大经典排序算法性质汇总\"></p>\n<h3 id=\"维基百科\"><a href=\"#维基百科\" class=\"headerlink\" title=\"维基百科\"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p>\n<p><strong>冒泡排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bubble_sort</a></p>\n<p><strong>选择排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Selection_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Selection_sort</a></p>\n<p><strong>插入排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Insertion_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Insertion_sort</a></p>\n<p><strong>快速排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Quicksort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Quicksort</a></p>\n<p><strong>归并排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Merge_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Merge_sort</a></p>\n<p><strong>希尔排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Shellsort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Shellsort</a></p>\n<p><strong>计数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Counting_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Counting_sort</a></p>\n<p><strong>基数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Radix_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Radix_sort</a></p>\n<p><strong>桶排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bucket_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bucket_sort</a></p>\n<p><strong>堆排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Heapsort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Heapsort</a></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p>\n<p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 冒泡排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> n<span class=\"token number\">-2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 选择排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    idx <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 插入排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 快速排序（24 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 归并排序（192 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> lnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> rnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rnums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 归并排序 + 非递归（80 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mergeSortNR</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span>len<span class=\"token punctuation\">;</span> l <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>len<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 希尔排序（40 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">shellSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">-</span>gap <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">-</span><span class=\"token operator\">=</span> gap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 计数排序（32 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">countSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> maxv<span class=\"token operator\">-</span>minv<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>minv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 基数排序（不适用于负数）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxv <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxv <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            maxd<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rank</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxd <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                rank<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            maxd<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            base <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 桶排序 (20 ms)</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bs <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maxv<span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bucket<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 堆排序（32 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c2<span class=\"token operator\">&lt;</span>s <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>nums<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> c2 <span class=\"token operator\">:</span> c1<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            p <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>关注公众号【算法码上来】，每日算法干货马上就来！</p>\n</blockquote>\n<p><img src=\"/medias/contact.jpg\" alt></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p>\n<p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p>\n<p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href=\"https://leetcode-cn.com/problems/sort-an-array/\" title=\"LeetCode 912. 排序数组\" target=\"_blank\" rel=\"noopener\">LeetCode 912. 排序数组</a> 这道题。</p>\n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2><blockquote>\n<p>如果发现表中有错误，请留言告知。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n<th>空间</th>\n<th align=\"center\">稳定性</th>\n<th align=\"center\">是否基于比较</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(\\log n)$~$O(n)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>$O(n^{1.3})$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$~$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n+m)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p>\n</blockquote>\n<p><img src=\"//wizhiai.github.io/2020/02/16/sort-algorithms/1.png\" alt=\"十大经典排序算法性质汇总\"></p>\n<h3 id=\"维基百科\"><a href=\"#维基百科\" class=\"headerlink\" title=\"维基百科\"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p>\n<p><strong>冒泡排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bubble_sort</a></p>\n<p><strong>选择排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Selection_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Selection_sort</a></p>\n<p><strong>插入排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Insertion_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Insertion_sort</a></p>\n<p><strong>快速排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Quicksort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Quicksort</a></p>\n<p><strong>归并排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Merge_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Merge_sort</a></p>\n<p><strong>希尔排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Shellsort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Shellsort</a></p>\n<p><strong>计数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Counting_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Counting_sort</a></p>\n<p><strong>基数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Radix_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Radix_sort</a></p>\n<p><strong>桶排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bucket_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bucket_sort</a></p>\n<p><strong>堆排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Heapsort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Heapsort</a></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p>\n<p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;int&gt; sortArray(vector&lt;int&gt;&amp; nums) {\n        return quickSort(nums);\n    }\n\n    // 冒泡排序（超时）\n    vector&lt;int&gt; bubbleSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i) {\n            for (int j = n-2; j &gt;= i; --j) {\n                if (nums[j] &gt; nums[j+1]) {\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 选择排序（超时）\n    vector&lt;int&gt; selectSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i) {\n            int idx = i;\n            for (int j = i; j &lt; n; ++j) {\n                if (nums[j] &lt; nums[idx]) {\n                    idx = j;\n                }\n            }\n            swap(nums[i], nums[idx]);\n        }\n        return nums;\n    }\n\n    // 插入排序（超时）\n    vector&lt;int&gt; insertSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i) {\n            for (int j = i; j &gt; 0 &amp;&amp; nums[j] &lt; nums[j-1]; --j) {\n                swap(nums[j], nums[j-1]);\n            }\n        }\n        return nums;\n    }\n\n    // 快速排序（24 ms）\n    void qSort(vector&lt;int&gt;&amp; nums, int l, int r) {\n        if (l &gt;= r) return;\n        int m = l;\n        for (int i = l; i &lt; r; ++i) {\n            if (nums[i] &lt; nums[r]) {\n                swap(nums[m++], nums[i]);\n            }\n        }\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    }\n\n    vector&lt;int&gt; quickSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序（192 ms）\n    vector&lt;int&gt; mSort(vector&lt;int&gt;&amp; nums, int l, int r) {\n        if (l &gt;= r) return {nums[l]};\n        int m = l+(r-l)/2;\n        vector&lt;int&gt; lnums = mSort(nums, l, m);\n        vector&lt;int&gt; rnums = mSort(nums, m+1, r);\n        vector&lt;int&gt; res;\n        int i = 0, j = 0;\n        while (i &lt;= m-l &amp;&amp; j &lt;= r-m-1) {\n            if (lnums[i] &lt; rnums[j]) {\n                res.push_back(lnums[i++]);\n            } else {\n                res.push_back(rnums[j++]);\n            }\n        }\n        while (i &lt;= m-l) {\n            res.push_back(lnums[i++]);\n        }\n        while (j &lt;= r-m-1) {\n            res.push_back(rnums[j++]);\n        }\n        return res;\n    }\n\n    vector&lt;int&gt; mergeSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序 + 非递归（80 ms）\n    vector&lt;int&gt; mergeSortNR(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int len = 1; len &lt; n; len &lt;&lt;= 1) {\n            for (int l = 0; l &lt; n-len; l += 2*len) {\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector&lt;int&gt; res;\n                int i = l, j = m+1;\n                while (i &lt;= m &amp;&amp; j &lt;= r) {\n                    if (nums[i] &lt; nums[j]) {\n                        res.push_back(nums[i++]);\n                    } else {\n                        res.push_back(nums[j++]);\n                    }\n                }\n                while (i &lt;= m) {\n                    res.push_back(nums[i++]);\n                }\n                while (j &lt;= r) {\n                    res.push_back(nums[j++]);\n                }\n                for (int i = l; i &lt;= r; ++i) {\n                    nums[i] = res[i-l];\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 希尔排序（40 ms）\n    vector&lt;int&gt; shellSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int gap = n/2; gap &gt; 0; gap /= 2) {\n            for (int i = gap; i &lt; n; ++i) {\n                for (int j = i; j-gap &gt;= 0 &amp;&amp; nums[j-gap] &gt; nums[j]; j -= gap) {\n                    swap(nums[j-gap], nums[j]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 计数排序（32 ms）\n    vector&lt;int&gt; countSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (!n) return {};\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector&lt;int&gt; count(m, 0);\n        for (int i = 0; i &lt; n; ++i) {\n            count[nums[i]-minv]++;\n        }\n        vector&lt;int&gt; res;\n        for (int i = 0; i &lt; m; ++i) {\n            for (int j = 0; j &lt; count[i]; ++j) {\n                res.push_back(i+minv);\n            }\n        }\n        return res;\n    }\n\n    // 基数排序（不适用于负数）\n    vector&lt;int&gt; radixSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv &gt; 0) {\n            maxv /= 10;\n            maxd++;\n        }\n        vector&lt;int&gt; count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd &gt; 0) {\n            count.assign(10, 0);\n            for (int i = 0; i &lt; n; ++i) {\n                count[(nums[i]/base)%10]++;\n            }\n            for (int i = 1; i &lt; 10; ++i) {\n                count[i] += count[i-1];\n            }\n            for (int i = n-1; i &gt;= 0; --i) {\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            }\n            for (int i = 0; i &lt; n; ++i) {\n                nums[i] = rank[i];\n            }\n            maxd--;\n            base *= 10;\n        }\n        return nums;\n    }\n\n    // 桶排序 (20 ms)\n    vector&lt;int&gt; bucketSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector&lt;vector&lt;int&gt; &gt; bucket(m);\n        for (int i = 0; i &lt; n; ++i) {\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        }\n        int idx = 0;\n        for (int i = 0; i &lt; m; ++i) {\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j &lt; sz; ++j) {\n                nums[idx++] = bucket[i][j];\n            }\n        }\n        return nums;\n    }\n\n    // 堆排序（32 ms）\n    void adjust(vector&lt;int&gt;&amp; nums, int p, int s) {\n        while (2*p+1 &lt; s) {\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2&lt;s &amp;&amp; nums[c2]&gt;nums[c1]) ? c2 : c1;\n            if (nums[c] &gt; nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        }\n    }\n\n    vector&lt;int&gt; heapSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int i = n/2-1; i &gt;= 0; --i) {\n            adjust(nums, i, n);\n        }\n        for (int i = n-1; i &gt; 0; --i) {\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        }\n        return nums;\n    }\n};</code></pre>\n"},{"title":"学习资料链接","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-21T07:22:37.000Z","password":null,"summary":null,"_content":"\n- [C语言学习](http://c.biancheng.net/c/)\n- [C++学习](http://c.biancheng.net/cplus/)\n- [Unity学习](http://c.biancheng.net/unity3d/)\n\n\n\n\n\n# 数据在内存中的存储（二进制形式存储）\n\n计算机要处理的信息是多种多样的，如数字、文字、符号、图形、音频、视频等，这些信息在人们的眼里是不同的。但对于计算机来说，它们在内存中都是一样的，都是以二进制的形式来表示。\n\n要想学习编程，就必须了解二进制，它是计算机处理数据的基础。\n\n内存条是一个非常精密的部件，包含了上亿个电子元器件，它们很小，达到了纳米级别。这些元器件，实际上就是电路；电路的电压会变化，要么是 0V，要么是 5V，只有这两种电压。5V 是通电，用1来表示，0V 是断电，用0来表示。所以，一个元器件有2种状态，0 或者 1。\n\n我们通过电路来控制这些元器件的通断电，会得到很多0、1的组合。例如，8个元器件有 28=256 种不同的组合，16个元器件有 216=65536 种不同的组合。虽然一个元器件只能表示2个数值，但是多个结合起来就可以表示很多数值了。\n\n我们可以给每一种组合赋予特定的含义，例如，可以分别用 1101000、00011100、11111111、00000000、01010101、10101010 来表示 C、语、言、中、文、网 这几个字，那么结合起来 1101000 00011100 11111111 00000000 01010101 10101010 就表示”C语言中文网“。\n\n一般情况下我们不一个一个的使用元器件，而是将8个元器件看做一个单位，即使表示很小的数，例如 1，也需要8个，也就是 00000001。\n\n1个元器件称为1比特（Bit）或1位，8个元器件称为1字节（Byte），那么16个元器件就是2Byte，32个就是4Byte，以此类推：\n\n- 8×1024个元器件就是1024Byte，简写为1KB；\n- 8×1024×1024个元器件就是1024KB，简写为1MB；\n- 8×1024×1024×1024个元器件就是1024MB，简写为1GB。\n\n\n现在，你知道1GB的内存有多少个元器件了吧。我们通常所说的文件大小是多少 KB、多少 MB，就是这个意思。\n\n单位换算：\n\n- 1Byte = 8 Bit\n- 1KB = 1024Byte = 210Byte\n- 1MB = 1024KB = 220Byte\n- 1GB = 1024MB = 230Byte\n- 1TB = 1024GB = 240Byte\n- 1PB = 1024TB = 250Byte\n- 1EB = 1024PB = 260Byte\n\n\n我们平时使用计算机时，通常只会设计到 KB、MB、GB、TB 这几个单位，PB 和 EB 这两个高级单位一般在[大数据](http://c.biancheng.net/big_data/)处理过程中才会用到。\n\n你看，在内存中没有abc这样的字符，也没有gif、jpg这样的图片，只有0和1两个数字，计算机也只认识0和1。所以，计算机使用二进制，而不是我们熟悉的十进制，写入内存中的数据，都会被转换成0和1的组合。\n\n我们将在《[C语言调试](http://c.biancheng.net/c/130/)》中的《[查看、修改运行时的内存](http://c.biancheng.net/view/vip_2085.html)》一节教大家如何操作C语言程序的内存。\n\n## 程序员的幽默\n\n为了加深印象，最后给大家看个笑话。\n\n程序员A：“哥们儿，最近手头紧，借点钱？”\n\n程序员B：“成啊，要多少？”\n\n程序员A：“一千行不？”\n\n程序员B：“咱俩谁跟谁！给你凑个整，1024，拿去吧。”\n\n你看懂这个笑话了吗？请选出正确答案。\n\nA) 因为他同情程序员A，多给他24块\nB) 这个程序员不会数数，可能是太穷饿晕了\nC) 这个程序员故意的，因为他独裁的老婆规定1024是整数\nD) 就像100是10的整数次方一样，1024是2的整数次方，对于程序员就是整数","source":"_posts/学习资料链接.md","raw":"---\ntitle: 学习资料链接\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-21 15:22:37\npassword:\nsummary:\ntags:\ncategories:\n\n---\n\n- [C语言学习](http://c.biancheng.net/c/)\n- [C++学习](http://c.biancheng.net/cplus/)\n- [Unity学习](http://c.biancheng.net/unity3d/)\n\n\n\n\n\n# 数据在内存中的存储（二进制形式存储）\n\n计算机要处理的信息是多种多样的，如数字、文字、符号、图形、音频、视频等，这些信息在人们的眼里是不同的。但对于计算机来说，它们在内存中都是一样的，都是以二进制的形式来表示。\n\n要想学习编程，就必须了解二进制，它是计算机处理数据的基础。\n\n内存条是一个非常精密的部件，包含了上亿个电子元器件，它们很小，达到了纳米级别。这些元器件，实际上就是电路；电路的电压会变化，要么是 0V，要么是 5V，只有这两种电压。5V 是通电，用1来表示，0V 是断电，用0来表示。所以，一个元器件有2种状态，0 或者 1。\n\n我们通过电路来控制这些元器件的通断电，会得到很多0、1的组合。例如，8个元器件有 28=256 种不同的组合，16个元器件有 216=65536 种不同的组合。虽然一个元器件只能表示2个数值，但是多个结合起来就可以表示很多数值了。\n\n我们可以给每一种组合赋予特定的含义，例如，可以分别用 1101000、00011100、11111111、00000000、01010101、10101010 来表示 C、语、言、中、文、网 这几个字，那么结合起来 1101000 00011100 11111111 00000000 01010101 10101010 就表示”C语言中文网“。\n\n一般情况下我们不一个一个的使用元器件，而是将8个元器件看做一个单位，即使表示很小的数，例如 1，也需要8个，也就是 00000001。\n\n1个元器件称为1比特（Bit）或1位，8个元器件称为1字节（Byte），那么16个元器件就是2Byte，32个就是4Byte，以此类推：\n\n- 8×1024个元器件就是1024Byte，简写为1KB；\n- 8×1024×1024个元器件就是1024KB，简写为1MB；\n- 8×1024×1024×1024个元器件就是1024MB，简写为1GB。\n\n\n现在，你知道1GB的内存有多少个元器件了吧。我们通常所说的文件大小是多少 KB、多少 MB，就是这个意思。\n\n单位换算：\n\n- 1Byte = 8 Bit\n- 1KB = 1024Byte = 210Byte\n- 1MB = 1024KB = 220Byte\n- 1GB = 1024MB = 230Byte\n- 1TB = 1024GB = 240Byte\n- 1PB = 1024TB = 250Byte\n- 1EB = 1024PB = 260Byte\n\n\n我们平时使用计算机时，通常只会设计到 KB、MB、GB、TB 这几个单位，PB 和 EB 这两个高级单位一般在[大数据](http://c.biancheng.net/big_data/)处理过程中才会用到。\n\n你看，在内存中没有abc这样的字符，也没有gif、jpg这样的图片，只有0和1两个数字，计算机也只认识0和1。所以，计算机使用二进制，而不是我们熟悉的十进制，写入内存中的数据，都会被转换成0和1的组合。\n\n我们将在《[C语言调试](http://c.biancheng.net/c/130/)》中的《[查看、修改运行时的内存](http://c.biancheng.net/view/vip_2085.html)》一节教大家如何操作C语言程序的内存。\n\n## 程序员的幽默\n\n为了加深印象，最后给大家看个笑话。\n\n程序员A：“哥们儿，最近手头紧，借点钱？”\n\n程序员B：“成啊，要多少？”\n\n程序员A：“一千行不？”\n\n程序员B：“咱俩谁跟谁！给你凑个整，1024，拿去吧。”\n\n你看懂这个笑话了吗？请选出正确答案。\n\nA) 因为他同情程序员A，多给他24块\nB) 这个程序员不会数数，可能是太穷饿晕了\nC) 这个程序员故意的，因为他独裁的老婆规定1024是整数\nD) 就像100是10的整数次方一样，1024是2的整数次方，对于程序员就是整数","slug":"学习资料链接","published":1,"updated":"2020-04-21T07:28:17.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5uc0009nfay2ael859n","content":"<ul>\n<li><a href=\"http://c.biancheng.net/c/\" target=\"_blank\" rel=\"noopener\">C语言学习</a></li>\n<li><a href=\"http://c.biancheng.net/cplus/\" target=\"_blank\" rel=\"noopener\">C++学习</a></li>\n<li><a href=\"http://c.biancheng.net/unity3d/\" target=\"_blank\" rel=\"noopener\">Unity学习</a></li>\n</ul>\n<h1 id=\"数据在内存中的存储（二进制形式存储）\"><a href=\"#数据在内存中的存储（二进制形式存储）\" class=\"headerlink\" title=\"数据在内存中的存储（二进制形式存储）\"></a>数据在内存中的存储（二进制形式存储）</h1><p>计算机要处理的信息是多种多样的，如数字、文字、符号、图形、音频、视频等，这些信息在人们的眼里是不同的。但对于计算机来说，它们在内存中都是一样的，都是以二进制的形式来表示。</p>\n<p>要想学习编程，就必须了解二进制，它是计算机处理数据的基础。</p>\n<p>内存条是一个非常精密的部件，包含了上亿个电子元器件，它们很小，达到了纳米级别。这些元器件，实际上就是电路；电路的电压会变化，要么是 0V，要么是 5V，只有这两种电压。5V 是通电，用1来表示，0V 是断电，用0来表示。所以，一个元器件有2种状态，0 或者 1。</p>\n<p>我们通过电路来控制这些元器件的通断电，会得到很多0、1的组合。例如，8个元器件有 28=256 种不同的组合，16个元器件有 216=65536 种不同的组合。虽然一个元器件只能表示2个数值，但是多个结合起来就可以表示很多数值了。</p>\n<p>我们可以给每一种组合赋予特定的含义，例如，可以分别用 1101000、00011100、11111111、00000000、01010101、10101010 来表示 C、语、言、中、文、网 这几个字，那么结合起来 1101000 00011100 11111111 00000000 01010101 10101010 就表示”C语言中文网“。</p>\n<p>一般情况下我们不一个一个的使用元器件，而是将8个元器件看做一个单位，即使表示很小的数，例如 1，也需要8个，也就是 00000001。</p>\n<p>1个元器件称为1比特（Bit）或1位，8个元器件称为1字节（Byte），那么16个元器件就是2Byte，32个就是4Byte，以此类推：</p>\n<ul>\n<li>8×1024个元器件就是1024Byte，简写为1KB；</li>\n<li>8×1024×1024个元器件就是1024KB，简写为1MB；</li>\n<li>8×1024×1024×1024个元器件就是1024MB，简写为1GB。</li>\n</ul>\n<p>现在，你知道1GB的内存有多少个元器件了吧。我们通常所说的文件大小是多少 KB、多少 MB，就是这个意思。</p>\n<p>单位换算：</p>\n<ul>\n<li>1Byte = 8 Bit</li>\n<li>1KB = 1024Byte = 210Byte</li>\n<li>1MB = 1024KB = 220Byte</li>\n<li>1GB = 1024MB = 230Byte</li>\n<li>1TB = 1024GB = 240Byte</li>\n<li>1PB = 1024TB = 250Byte</li>\n<li>1EB = 1024PB = 260Byte</li>\n</ul>\n<p>我们平时使用计算机时，通常只会设计到 KB、MB、GB、TB 这几个单位，PB 和 EB 这两个高级单位一般在<a href=\"http://c.biancheng.net/big_data/\" target=\"_blank\" rel=\"noopener\">大数据</a>处理过程中才会用到。</p>\n<p>你看，在内存中没有abc这样的字符，也没有gif、jpg这样的图片，只有0和1两个数字，计算机也只认识0和1。所以，计算机使用二进制，而不是我们熟悉的十进制，写入内存中的数据，都会被转换成0和1的组合。</p>\n<p>我们将在《<a href=\"http://c.biancheng.net/c/130/\" target=\"_blank\" rel=\"noopener\">C语言调试</a>》中的《<a href=\"http://c.biancheng.net/view/vip_2085.html\" target=\"_blank\" rel=\"noopener\">查看、修改运行时的内存</a>》一节教大家如何操作C语言程序的内存。</p>\n<h2 id=\"程序员的幽默\"><a href=\"#程序员的幽默\" class=\"headerlink\" title=\"程序员的幽默\"></a>程序员的幽默</h2><p>为了加深印象，最后给大家看个笑话。</p>\n<p>程序员A：“哥们儿，最近手头紧，借点钱？”</p>\n<p>程序员B：“成啊，要多少？”</p>\n<p>程序员A：“一千行不？”</p>\n<p>程序员B：“咱俩谁跟谁！给你凑个整，1024，拿去吧。”</p>\n<p>你看懂这个笑话了吗？请选出正确答案。</p>\n<p>A) 因为他同情程序员A，多给他24块<br>B) 这个程序员不会数数，可能是太穷饿晕了<br>C) 这个程序员故意的，因为他独裁的老婆规定1024是整数<br>D) 就像100是10的整数次方一样，1024是2的整数次方，对于程序员就是整数</p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<ul>\n<li><a href=\"http://c.biancheng.net/c/\" target=\"_blank\" rel=\"noopener\">C语言学习</a></li>\n<li><a href=\"http://c.biancheng.net/cplus/\" target=\"_blank\" rel=\"noopener\">C++学习</a></li>\n<li><a href=\"http://c.biancheng.net/unity3d/\" target=\"_blank\" rel=\"noopener\">Unity学习</a></li>\n</ul>\n<h1 id=\"数据在内存中的存储（二进制形式存储）\"><a href=\"#数据在内存中的存储（二进制形式存储）\" class=\"headerlink\" title=\"数据在内存中的存储（二进制形式存储）\"></a>数据在内存中的存储（二进制形式存储）</h1><p>计算机要处理的信息是多种多样的，如数字、文字、符号、图形、音频、视频等，这些信息在人们的眼里是不同的。但对于计算机来说，它们在内存中都是一样的，都是以二进制的形式来表示。</p>\n<p>要想学习编程，就必须了解二进制，它是计算机处理数据的基础。</p>\n<p>内存条是一个非常精密的部件，包含了上亿个电子元器件，它们很小，达到了纳米级别。这些元器件，实际上就是电路；电路的电压会变化，要么是 0V，要么是 5V，只有这两种电压。5V 是通电，用1来表示，0V 是断电，用0来表示。所以，一个元器件有2种状态，0 或者 1。</p>\n<p>我们通过电路来控制这些元器件的通断电，会得到很多0、1的组合。例如，8个元器件有 28=256 种不同的组合，16个元器件有 216=65536 种不同的组合。虽然一个元器件只能表示2个数值，但是多个结合起来就可以表示很多数值了。</p>\n<p>我们可以给每一种组合赋予特定的含义，例如，可以分别用 1101000、00011100、11111111、00000000、01010101、10101010 来表示 C、语、言、中、文、网 这几个字，那么结合起来 1101000 00011100 11111111 00000000 01010101 10101010 就表示”C语言中文网“。</p>\n<p>一般情况下我们不一个一个的使用元器件，而是将8个元器件看做一个单位，即使表示很小的数，例如 1，也需要8个，也就是 00000001。</p>\n<p>1个元器件称为1比特（Bit）或1位，8个元器件称为1字节（Byte），那么16个元器件就是2Byte，32个就是4Byte，以此类推：</p>\n<ul>\n<li>8×1024个元器件就是1024Byte，简写为1KB；</li>\n<li>8×1024×1024个元器件就是1024KB，简写为1MB；</li>\n<li>8×1024×1024×1024个元器件就是1024MB，简写为1GB。</li>\n</ul>\n<p>现在，你知道1GB的内存有多少个元器件了吧。我们通常所说的文件大小是多少 KB、多少 MB，就是这个意思。</p>\n<p>单位换算：</p>\n<ul>\n<li>1Byte = 8 Bit</li>\n<li>1KB = 1024Byte = 210Byte</li>\n<li>1MB = 1024KB = 220Byte</li>\n<li>1GB = 1024MB = 230Byte</li>\n<li>1TB = 1024GB = 240Byte</li>\n<li>1PB = 1024TB = 250Byte</li>\n<li>1EB = 1024PB = 260Byte</li>\n</ul>\n<p>我们平时使用计算机时，通常只会设计到 KB、MB、GB、TB 这几个单位，PB 和 EB 这两个高级单位一般在<a href=\"http://c.biancheng.net/big_data/\" target=\"_blank\" rel=\"noopener\">大数据</a>处理过程中才会用到。</p>\n<p>你看，在内存中没有abc这样的字符，也没有gif、jpg这样的图片，只有0和1两个数字，计算机也只认识0和1。所以，计算机使用二进制，而不是我们熟悉的十进制，写入内存中的数据，都会被转换成0和1的组合。</p>\n<p>我们将在《<a href=\"http://c.biancheng.net/c/130/\" target=\"_blank\" rel=\"noopener\">C语言调试</a>》中的《<a href=\"http://c.biancheng.net/view/vip_2085.html\" target=\"_blank\" rel=\"noopener\">查看、修改运行时的内存</a>》一节教大家如何操作C语言程序的内存。</p>\n<h2 id=\"程序员的幽默\"><a href=\"#程序员的幽默\" class=\"headerlink\" title=\"程序员的幽默\"></a>程序员的幽默</h2><p>为了加深印象，最后给大家看个笑话。</p>\n<p>程序员A：“哥们儿，最近手头紧，借点钱？”</p>\n<p>程序员B：“成啊，要多少？”</p>\n<p>程序员A：“一千行不？”</p>\n<p>程序员B：“咱俩谁跟谁！给你凑个整，1024，拿去吧。”</p>\n<p>你看懂这个笑话了吗？请选出正确答案。</p>\n<p>A) 因为他同情程序员A，多给他24块<br>B) 这个程序员不会数数，可能是太穷饿晕了<br>C) 这个程序员故意的，因为他独裁的老婆规定1024是整数<br>D) 就像100是10的整数次方一样，1024是2的整数次方，对于程序员就是整数</p>\n"},{"title":"hexo添加图片，网页首页正常浏览，结合typora，实现复制图片，自动插入","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-28T10:12:23.000Z","password":null,"summary":null,"_content":"\n\n\n在根目录下配置文件_config.yml 中有 post_asset_folder:false改为true。这样在建立文件时，Hexo会自动建立一个与文章同名的文件夹，这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用。如这里我放了一张test.jpg的图片。\ngit bash安装插件：npm install https://github.com/7ym0n/hexo-asset-image --save（这是个修改过的插件，经测试无问题），使用这个插件来引入图片\n\n\n\n设置typora，偏好设置->图片设置:\n\n\n\n![image-20200428182128636](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5.assets/image-20200428182128636.png)\n\n\n\n![image-20200428182128636](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5/image-20200428182128636.png)\n\n{% asset_img %E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.49.png This is an image %}\n\n\n\n![alt](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5/image-20200428182128636.png)\n\n\n\n**{% asset_img %E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.49.png This is an example image %}**\n\n\n\n\n\n代码两种都可以(如果当时不显示记得执行cl和g，稍等一会就可以了)：\n\n- **`{% asset_img %E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.49.png This is an example image %}**`\n- `![image-20200428182128636](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5/image-20200428182128636.png)`\n\n","source":"_posts/hexo添加图片，网页首页正常浏览，结合typora，实现复制图片，自动插入.md","raw":"---\ntitle: hexo添加图片，网页首页正常浏览，结合typora，实现复制图片，自动插入\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-28 18:12:23\npassword:\nsummary:\ntags:\ncategories:\n---\n\n\n\n在根目录下配置文件_config.yml 中有 post_asset_folder:false改为true。这样在建立文件时，Hexo会自动建立一个与文章同名的文件夹，这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用。如这里我放了一张test.jpg的图片。\ngit bash安装插件：npm install https://github.com/7ym0n/hexo-asset-image --save（这是个修改过的插件，经测试无问题），使用这个插件来引入图片\n\n\n\n设置typora，偏好设置->图片设置:\n\n\n\n![image-20200428182128636](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5.assets/image-20200428182128636.png)\n\n\n\n![image-20200428182128636](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5/image-20200428182128636.png)\n\n{% asset_img %E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.49.png This is an image %}\n\n\n\n![alt](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5/image-20200428182128636.png)\n\n\n\n**{% asset_img %E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.49.png This is an example image %}**\n\n\n\n\n\n代码两种都可以(如果当时不显示记得执行cl和g，稍等一会就可以了)：\n\n- **`{% asset_img %E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.49.png This is an example image %}**`\n- `![image-20200428182128636](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5/image-20200428182128636.png)`\n\n","slug":"hexo添加图片，网页首页正常浏览，结合typora，实现复制图片，自动插入","published":1,"updated":"2020-04-28T10:49:35.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5ug000dnfay8hw25vc2","content":"<p>在根目录下配置文件_config.yml 中有 post_asset_folder:false改为true。这样在建立文件时，Hexo会自动建立一个与文章同名的文件夹，这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用。如这里我放了一张test.jpg的图片。<br>git bash安装插件：npm install <a href=\"https://github.com/7ym0n/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">https://github.com/7ym0n/hexo-asset-image</a> –save（这是个修改过的插件，经测试无问题），使用这个插件来引入图片</p>\n<p>设置typora，偏好设置-&gt;图片设置:</p>\n<p><img src=\"//wizhiai.github.io/2020/04/28/hexo-tian-jia-tu-pian-wang-ye-shou-ye-zheng-chang-liu-lan-jie-he-typora-shi-xian-fu-zhi-tu-pian-zi-dong-cha-ru/image-20200428182128636.png\" alt=\"image-20200428182128636\"></p>\n<p><img src=\"//wizhiai.github.io/2020/04/28/hexo-tian-jia-tu-pian-wang-ye-shou-ye-zheng-chang-liu-lan-jie-he-typora-shi-xian-fu-zhi-tu-pian-zi-dong-cha-ru/image-20200428182128636.png\" alt=\"image-20200428182128636\"></p>\n\n\n\n\n<p><img src=\"//wizhiai.github.io/2020/04/28/hexo-tian-jia-tu-pian-wang-ye-shou-ye-zheng-chang-liu-lan-jie-he-typora-shi-xian-fu-zhi-tu-pian-zi-dong-cha-ru/image-20200428182128636.png\" alt=\"alt\"></p>\n<p><strong></strong></p>\n<p>代码两种都可以(如果当时不显示记得执行cl和g，稍等一会就可以了)：</p>\n<ul>\n<li><strong>`</strong>`</li>\n<li><code>![image-20200428182128636](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5/image-20200428182128636.png)</code></li>\n</ul>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>在根目录下配置文件_config.yml 中有 post_asset_folder:false改为true。这样在建立文件时，Hexo会自动建立一个与文章同名的文件夹，这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用。如这里我放了一张test.jpg的图片。<br>git bash安装插件：npm install <a href=\"https://github.com/7ym0n/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">https://github.com/7ym0n/hexo-asset-image</a> –save（这是个修改过的插件，经测试无问题），使用这个插件来引入图片</p>\n<p>设置typora，偏好设置-&gt;图片设置:</p>\n<p><img src=\"//wizhiai.github.io/2020/04/28/hexo-tian-jia-tu-pian-wang-ye-shou-ye-zheng-chang-liu-lan-jie-he-typora-shi-xian-fu-zhi-tu-pian-zi-dong-cha-ru/image-20200428182128636.png\" alt=\"image-20200428182128636\"></p>\n<p><img src=\"//wizhiai.github.io/2020/04/28/hexo-tian-jia-tu-pian-wang-ye-shou-ye-zheng-chang-liu-lan-jie-he-typora-shi-xian-fu-zhi-tu-pian-zi-dong-cha-ru/image-20200428182128636.png\" alt=\"image-20200428182128636\"></p>\n\n\n\n\n<p><img src=\"//wizhiai.github.io/2020/04/28/hexo-tian-jia-tu-pian-wang-ye-shou-ye-zheng-chang-liu-lan-jie-he-typora-shi-xian-fu-zhi-tu-pian-zi-dong-cha-ru/image-20200428182128636.png\" alt=\"alt\"></p>\n<p><strong></strong></p>\n<p>代码两种都可以(如果当时不显示记得执行cl和g，稍等一会就可以了)：</p>\n<ul>\n<li><strong>`</strong>`</li>\n<li><code>![image-20200428182128636](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5/image-20200428182128636.png)</code></li>\n</ul>\n"},{"title":"旋转数组的三种方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-26T15:02:31.000Z","password":null,"summary":null,"_content":"\n方法 1：暴力\n最简单的方法是旋转 k 次，每次将数组旋转 1 个元素。\n\nJava\n`public class Solution {`\n    `public void rotate(int[] nums, int k) {`\n        `int temp, previous;`\n        `for (int i = 0; i < k; i++) {`\n            `previous = nums[nums.length - 1];`\n            `for (int j = 0; j < nums.length; j++) {`\n                `temp = nums[j];`\n                `nums[j] = previous;`\n                `previous = temp;`\n            `}`\n        `}`\n    `}`\n`}`\n复杂度分析\n\n时间复杂度：O(n*k)O(n∗k) 。每个元素都被移动 1 步（O(n)） k次（O(k)） 。\n空间复杂度：O(1) 。没有额外空间被使用。\n方法 2：使用额外的数组\n算法\n\n我们可以用一个额外的数组来将每个元素放到正确的位置上，也就是原本数组里下标为 ii 的我们把它放到 (i+k)\\%数组长度 的位置。然后把新的数组拷贝到原数组中。\n\nJava\n`public class Solution {`\n    `public void rotate(int[] nums, int k) {`\n        `int[] a = new int[nums.length];`\n        `for (int i = 0; i < nums.length; i++) {`\n            `a[(i + k) % nums.length] = nums[i];`\n        `}`\n        `for (int i = 0; i < nums.length; i++) {`\n            `nums[i] = a[i];`\n        `}`\n    `}`\n`}`\n复杂度分析\n\n时间复杂度： O(n) 。将数字放到新的数组中需要一遍遍历，另一边来把新数组的元素拷贝回原数组。\n空间复杂度： O(n)。另一个数组需要原数组长度的空间。\n方法 3：使用环状替换\n算法\n\n如果我们直接把每一个数字放到它最后的位置，但这样的后果是遗失原来的元素。因此，我们需要把被替换的数字保存在变量 temptemp 里面。然后，我们将被替换数字（temp）放到它正确的位置，并继续这个过程 n 次， n 是数组的长度。这是因为我们需要将数组里所有的元素都移动。但是，这种方法可能会有个问题，如果 n%k==0，其中 k=k%n （因为如果 k 大于 n ，移动 k 次实际上相当于移动 k%n 次）。这种情况下，我们会发现在没有遍历所有数字的情况下回到出发数字。此时，我们应该从下一个数字开始再重复相同的过程。\n\n现在，我们看看上面方法的证明。假设，数组里我们有 n 个元素并且 k 是要求移动的次数。更进一步，假设 n%k=0 。第一轮中，所有移动数字的下标 i 满足 i%k==0 。这是因为我们每跳 k 步，我们只会到达相距为 k 个位置下标的数。每一轮，我们都会移动n/k个元素。下一轮中，我们会移动满足 i%k==1的位置的数。这样的轮次会一直持续到我们再次遇到 i%k==0 的地方为止，此时 i=k 。此时在正确位置上的数字共有k * n/k =n 个。因此所有数字都在正确位置上。\n\n让我们看一下接下来的例子，以更好地说明这个过程：\n\nnums: [1, 2, 3, 4, 5, 6]\nk: 2\n\nJava\n`public class Solution {`\n    `public void rotate(int[] nums, int k) {`\n        `k = k % nums.length;`\n        `int count = 0;`\n        `for (int start = 0; count < nums.length; start++) {`\n            `int current = start;`\n            `int prev = nums[start];`\n            `do {`\n                `int next = (current + k) % nums.length;`\n                `int temp = nums[next];`\n                `nums[next] = prev;`\n                `prev = temp;`\n                `current = next;`\n                `count++;`\n            `} while (start != current);`\n        `}`\n    `}`\n`}`\n复杂度分析\n\n时间复杂度：O(n) 。只遍历了每个元素一次。\n空间复杂度：O(1) 。使用了常数个额外空间。\n方法 4：使用反转\n算法\n\n这个方法基于这个事实：当我们旋转数组 k 次， k%n 个尾部元素会被移动到头部，剩下的元素会被向后移动。\n\n在这个方法中，我们首先将所有元素反转。然后反转前 k 个元素，再反转后面 n-kn−k 个元素，就能得到想要的结果。\n\n假设 n=7 且k=3 。\n\n原始数组                  : 1 2 3 4 5 6 7\n反转所有数字后             : 7 6 5 4 3 2 1\n反转前 k 个数字后          : 5 6 7 4 3 2 1\n反转后 n-k 个数字后        : 5 6 7 1 2 3 4 --> 结果\nJava\n`public class Solution {`\n    `public void rotate(int[] nums, int k) {`\n        `k %= nums.length;`\n        `reverse(nums, 0, nums.length - 1);`\n        `reverse(nums, 0, k - 1);`\n        `reverse(nums, k, nums.length - 1);`\n    `}`\n    `public void reverse(int[] nums, int start, int end) {`\n        `while (start < end) {`\n            `int temp = nums[start];`\n            `nums[start] = nums[end];`\n            `nums[end] = temp;`\n            `start++;`\n            `end--;`\n        `}`\n    `}`\n`}`\n复杂度分析\n\n时间复杂度：O(n) 。 n 个元素被反转了总共 3 次。\n空间复杂度：O(1) 。 没有使用额外的空间。\n\n","source":"_posts/旋转数组的三种方法.md","raw":"---\ntitle: 旋转数组的三种方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-26 23:02:31\npassword:\nsummary:\ntags:\ncategories:\n---\n\n方法 1：暴力\n最简单的方法是旋转 k 次，每次将数组旋转 1 个元素。\n\nJava\n`public class Solution {`\n    `public void rotate(int[] nums, int k) {`\n        `int temp, previous;`\n        `for (int i = 0; i < k; i++) {`\n            `previous = nums[nums.length - 1];`\n            `for (int j = 0; j < nums.length; j++) {`\n                `temp = nums[j];`\n                `nums[j] = previous;`\n                `previous = temp;`\n            `}`\n        `}`\n    `}`\n`}`\n复杂度分析\n\n时间复杂度：O(n*k)O(n∗k) 。每个元素都被移动 1 步（O(n)） k次（O(k)） 。\n空间复杂度：O(1) 。没有额外空间被使用。\n方法 2：使用额外的数组\n算法\n\n我们可以用一个额外的数组来将每个元素放到正确的位置上，也就是原本数组里下标为 ii 的我们把它放到 (i+k)\\%数组长度 的位置。然后把新的数组拷贝到原数组中。\n\nJava\n`public class Solution {`\n    `public void rotate(int[] nums, int k) {`\n        `int[] a = new int[nums.length];`\n        `for (int i = 0; i < nums.length; i++) {`\n            `a[(i + k) % nums.length] = nums[i];`\n        `}`\n        `for (int i = 0; i < nums.length; i++) {`\n            `nums[i] = a[i];`\n        `}`\n    `}`\n`}`\n复杂度分析\n\n时间复杂度： O(n) 。将数字放到新的数组中需要一遍遍历，另一边来把新数组的元素拷贝回原数组。\n空间复杂度： O(n)。另一个数组需要原数组长度的空间。\n方法 3：使用环状替换\n算法\n\n如果我们直接把每一个数字放到它最后的位置，但这样的后果是遗失原来的元素。因此，我们需要把被替换的数字保存在变量 temptemp 里面。然后，我们将被替换数字（temp）放到它正确的位置，并继续这个过程 n 次， n 是数组的长度。这是因为我们需要将数组里所有的元素都移动。但是，这种方法可能会有个问题，如果 n%k==0，其中 k=k%n （因为如果 k 大于 n ，移动 k 次实际上相当于移动 k%n 次）。这种情况下，我们会发现在没有遍历所有数字的情况下回到出发数字。此时，我们应该从下一个数字开始再重复相同的过程。\n\n现在，我们看看上面方法的证明。假设，数组里我们有 n 个元素并且 k 是要求移动的次数。更进一步，假设 n%k=0 。第一轮中，所有移动数字的下标 i 满足 i%k==0 。这是因为我们每跳 k 步，我们只会到达相距为 k 个位置下标的数。每一轮，我们都会移动n/k个元素。下一轮中，我们会移动满足 i%k==1的位置的数。这样的轮次会一直持续到我们再次遇到 i%k==0 的地方为止，此时 i=k 。此时在正确位置上的数字共有k * n/k =n 个。因此所有数字都在正确位置上。\n\n让我们看一下接下来的例子，以更好地说明这个过程：\n\nnums: [1, 2, 3, 4, 5, 6]\nk: 2\n\nJava\n`public class Solution {`\n    `public void rotate(int[] nums, int k) {`\n        `k = k % nums.length;`\n        `int count = 0;`\n        `for (int start = 0; count < nums.length; start++) {`\n            `int current = start;`\n            `int prev = nums[start];`\n            `do {`\n                `int next = (current + k) % nums.length;`\n                `int temp = nums[next];`\n                `nums[next] = prev;`\n                `prev = temp;`\n                `current = next;`\n                `count++;`\n            `} while (start != current);`\n        `}`\n    `}`\n`}`\n复杂度分析\n\n时间复杂度：O(n) 。只遍历了每个元素一次。\n空间复杂度：O(1) 。使用了常数个额外空间。\n方法 4：使用反转\n算法\n\n这个方法基于这个事实：当我们旋转数组 k 次， k%n 个尾部元素会被移动到头部，剩下的元素会被向后移动。\n\n在这个方法中，我们首先将所有元素反转。然后反转前 k 个元素，再反转后面 n-kn−k 个元素，就能得到想要的结果。\n\n假设 n=7 且k=3 。\n\n原始数组                  : 1 2 3 4 5 6 7\n反转所有数字后             : 7 6 5 4 3 2 1\n反转前 k 个数字后          : 5 6 7 4 3 2 1\n反转后 n-k 个数字后        : 5 6 7 1 2 3 4 --> 结果\nJava\n`public class Solution {`\n    `public void rotate(int[] nums, int k) {`\n        `k %= nums.length;`\n        `reverse(nums, 0, nums.length - 1);`\n        `reverse(nums, 0, k - 1);`\n        `reverse(nums, k, nums.length - 1);`\n    `}`\n    `public void reverse(int[] nums, int start, int end) {`\n        `while (start < end) {`\n            `int temp = nums[start];`\n            `nums[start] = nums[end];`\n            `nums[end] = temp;`\n            `start++;`\n            `end--;`\n        `}`\n    `}`\n`}`\n复杂度分析\n\n时间复杂度：O(n) 。 n 个元素被反转了总共 3 次。\n空间复杂度：O(1) 。 没有使用额外的空间。\n\n","slug":"旋转数组的三种方法","published":1,"updated":"2020-04-27T13:36:14.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5ui000fnfaywyui1rey","content":"<p>方法 1：暴力<br>最简单的方法是旋转 k 次，每次将数组旋转 1 个元素。</p>\n<p>Java<br><code>public class Solution {</code><br>    <code>public void rotate(int[] nums, int k) {</code><br>        <code>int temp, previous;</code><br>        <code>for (int i = 0; i &lt; k; i++) {</code><br>            <code>previous = nums[nums.length - 1];</code><br>            <code>for (int j = 0; j &lt; nums.length; j++) {</code><br>                <code>temp = nums[j];</code><br>                <code>nums[j] = previous;</code><br>                <code>previous = temp;</code><br>            <code>}</code><br>        <code>}</code><br>    <code>}</code><br><code>}</code><br>复杂度分析</p>\n<p>时间复杂度：O(n*k)O(n∗k) 。每个元素都被移动 1 步（O(n)） k次（O(k)） 。<br>空间复杂度：O(1) 。没有额外空间被使用。<br>方法 2：使用额外的数组<br>算法</p>\n<p>我们可以用一个额外的数组来将每个元素放到正确的位置上，也就是原本数组里下标为 ii 的我们把它放到 (i+k)\\%数组长度 的位置。然后把新的数组拷贝到原数组中。</p>\n<p>Java<br><code>public class Solution {</code><br>    <code>public void rotate(int[] nums, int k) {</code><br>        <code>int[] a = new int[nums.length];</code><br>        <code>for (int i = 0; i &lt; nums.length; i++) {</code><br>            <code>a[(i + k) % nums.length] = nums[i];</code><br>        <code>}</code><br>        <code>for (int i = 0; i &lt; nums.length; i++) {</code><br>            <code>nums[i] = a[i];</code><br>        <code>}</code><br>    <code>}</code><br><code>}</code><br>复杂度分析</p>\n<p>时间复杂度： O(n) 。将数字放到新的数组中需要一遍遍历，另一边来把新数组的元素拷贝回原数组。<br>空间复杂度： O(n)。另一个数组需要原数组长度的空间。<br>方法 3：使用环状替换<br>算法</p>\n<p>如果我们直接把每一个数字放到它最后的位置，但这样的后果是遗失原来的元素。因此，我们需要把被替换的数字保存在变量 temptemp 里面。然后，我们将被替换数字（temp）放到它正确的位置，并继续这个过程 n 次， n 是数组的长度。这是因为我们需要将数组里所有的元素都移动。但是，这种方法可能会有个问题，如果 n%k==0，其中 k=k%n （因为如果 k 大于 n ，移动 k 次实际上相当于移动 k%n 次）。这种情况下，我们会发现在没有遍历所有数字的情况下回到出发数字。此时，我们应该从下一个数字开始再重复相同的过程。</p>\n<p>现在，我们看看上面方法的证明。假设，数组里我们有 n 个元素并且 k 是要求移动的次数。更进一步，假设 n%k=0 。第一轮中，所有移动数字的下标 i 满足 i%k==0 。这是因为我们每跳 k 步，我们只会到达相距为 k 个位置下标的数。每一轮，我们都会移动n/k个元素。下一轮中，我们会移动满足 i%k==1的位置的数。这样的轮次会一直持续到我们再次遇到 i%k==0 的地方为止，此时 i=k 。此时在正确位置上的数字共有k * n/k =n 个。因此所有数字都在正确位置上。</p>\n<p>让我们看一下接下来的例子，以更好地说明这个过程：</p>\n<p>nums: [1, 2, 3, 4, 5, 6]<br>k: 2</p>\n<p>Java<br><code>public class Solution {</code><br>    <code>public void rotate(int[] nums, int k) {</code><br>        <code>k = k % nums.length;</code><br>        <code>int count = 0;</code><br>        <code>for (int start = 0; count &lt; nums.length; start++) {</code><br>            <code>int current = start;</code><br>            <code>int prev = nums[start];</code><br>            <code>do {</code><br>                <code>int next = (current + k) % nums.length;</code><br>                <code>int temp = nums[next];</code><br>                <code>nums[next] = prev;</code><br>                <code>prev = temp;</code><br>                <code>current = next;</code><br>                <code>count++;</code><br>            <code>} while (start != current);</code><br>        <code>}</code><br>    <code>}</code><br><code>}</code><br>复杂度分析</p>\n<p>时间复杂度：O(n) 。只遍历了每个元素一次。<br>空间复杂度：O(1) 。使用了常数个额外空间。<br>方法 4：使用反转<br>算法</p>\n<p>这个方法基于这个事实：当我们旋转数组 k 次， k%n 个尾部元素会被移动到头部，剩下的元素会被向后移动。</p>\n<p>在这个方法中，我们首先将所有元素反转。然后反转前 k 个元素，再反转后面 n-kn−k 个元素，就能得到想要的结果。</p>\n<p>假设 n=7 且k=3 。</p>\n<p>原始数组                  : 1 2 3 4 5 6 7<br>反转所有数字后             : 7 6 5 4 3 2 1<br>反转前 k 个数字后          : 5 6 7 4 3 2 1<br>反转后 n-k 个数字后        : 5 6 7 1 2 3 4 –&gt; 结果<br>Java<br><code>public class Solution {</code><br>    <code>public void rotate(int[] nums, int k) {</code><br>        <code>k %= nums.length;</code><br>        <code>reverse(nums, 0, nums.length - 1);</code><br>        <code>reverse(nums, 0, k - 1);</code><br>        <code>reverse(nums, k, nums.length - 1);</code><br>    <code>}</code><br>    <code>public void reverse(int[] nums, int start, int end) {</code><br>        <code>while (start &lt; end) {</code><br>            <code>int temp = nums[start];</code><br>            <code>nums[start] = nums[end];</code><br>            <code>nums[end] = temp;</code><br>            <code>start++;</code><br>            <code>end--;</code><br>        <code>}</code><br>    <code>}</code><br><code>}</code><br>复杂度分析</p>\n<p>时间复杂度：O(n) 。 n 个元素被反转了总共 3 次。<br>空间复杂度：O(1) 。 没有使用额外的空间。</p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>方法 1：暴力<br>最简单的方法是旋转 k 次，每次将数组旋转 1 个元素。</p>\n<p>Java<br><code>public class Solution {</code><br>    <code>public void rotate(int[] nums, int k) {</code><br>        <code>int temp, previous;</code><br>        <code>for (int i = 0; i &lt; k; i++) {</code><br>            <code>previous = nums[nums.length - 1];</code><br>            <code>for (int j = 0; j &lt; nums.length; j++) {</code><br>                <code>temp = nums[j];</code><br>                <code>nums[j] = previous;</code><br>                <code>previous = temp;</code><br>            <code>}</code><br>        <code>}</code><br>    <code>}</code><br><code>}</code><br>复杂度分析</p>\n<p>时间复杂度：O(n*k)O(n∗k) 。每个元素都被移动 1 步（O(n)） k次（O(k)） 。<br>空间复杂度：O(1) 。没有额外空间被使用。<br>方法 2：使用额外的数组<br>算法</p>\n<p>我们可以用一个额外的数组来将每个元素放到正确的位置上，也就是原本数组里下标为 ii 的我们把它放到 (i+k)\\%数组长度 的位置。然后把新的数组拷贝到原数组中。</p>\n<p>Java<br><code>public class Solution {</code><br>    <code>public void rotate(int[] nums, int k) {</code><br>        <code>int[] a = new int[nums.length];</code><br>        <code>for (int i = 0; i &lt; nums.length; i++) {</code><br>            <code>a[(i + k) % nums.length] = nums[i];</code><br>        <code>}</code><br>        <code>for (int i = 0; i &lt; nums.length; i++) {</code><br>            <code>nums[i] = a[i];</code><br>        <code>}</code><br>    <code>}</code><br><code>}</code><br>复杂度分析</p>\n<p>时间复杂度： O(n) 。将数字放到新的数组中需要一遍遍历，另一边来把新数组的元素拷贝回原数组。<br>空间复杂度： O(n)。另一个数组需要原数组长度的空间。<br>方法 3：使用环状替换<br>算法</p>\n<p>如果我们直接把每一个数字放到它最后的位置，但这样的后果是遗失原来的元素。因此，我们需要把被替换的数字保存在变量 temptemp 里面。然后，我们将被替换数字（temp）放到它正确的位置，并继续这个过程 n 次， n 是数组的长度。这是因为我们需要将数组里所有的元素都移动。但是，这种方法可能会有个问题，如果 n%k==0，其中 k=k%n （因为如果 k 大于 n ，移动 k 次实际上相当于移动 k%n 次）。这种情况下，我们会发现在没有遍历所有数字的情况下回到出发数字。此时，我们应该从下一个数字开始再重复相同的过程。</p>\n<p>现在，我们看看上面方法的证明。假设，数组里我们有 n 个元素并且 k 是要求移动的次数。更进一步，假设 n%k=0 。第一轮中，所有移动数字的下标 i 满足 i%k==0 。这是因为我们每跳 k 步，我们只会到达相距为 k 个位置下标的数。每一轮，我们都会移动n/k个元素。下一轮中，我们会移动满足 i%k==1的位置的数。这样的轮次会一直持续到我们再次遇到 i%k==0 的地方为止，此时 i=k 。此时在正确位置上的数字共有k * n/k =n 个。因此所有数字都在正确位置上。</p>\n<p>让我们看一下接下来的例子，以更好地说明这个过程：</p>\n<p>nums: [1, 2, 3, 4, 5, 6]<br>k: 2</p>\n<p>Java<br><code>public class Solution {</code><br>    <code>public void rotate(int[] nums, int k) {</code><br>        <code>k = k % nums.length;</code><br>        <code>int count = 0;</code><br>        <code>for (int start = 0; count &lt; nums.length; start++) {</code><br>            <code>int current = start;</code><br>            <code>int prev = nums[start];</code><br>            <code>do {</code><br>                <code>int next = (current + k) % nums.length;</code><br>                <code>int temp = nums[next];</code><br>                <code>nums[next] = prev;</code><br>                <code>prev = temp;</code><br>                <code>current = next;</code><br>                <code>count++;</code><br>            <code>} while (start != current);</code><br>        <code>}</code><br>    <code>}</code><br><code>}</code><br>复杂度分析</p>\n<p>时间复杂度：O(n) 。只遍历了每个元素一次。<br>空间复杂度：O(1) 。使用了常数个额外空间。<br>方法 4：使用反转<br>算法</p>\n<p>这个方法基于这个事实：当我们旋转数组 k 次， k%n 个尾部元素会被移动到头部，剩下的元素会被向后移动。</p>\n<p>在这个方法中，我们首先将所有元素反转。然后反转前 k 个元素，再反转后面 n-kn−k 个元素，就能得到想要的结果。</p>\n<p>假设 n=7 且k=3 。</p>\n<p>原始数组                  : 1 2 3 4 5 6 7<br>反转所有数字后             : 7 6 5 4 3 2 1<br>反转前 k 个数字后          : 5 6 7 4 3 2 1<br>反转后 n-k 个数字后        : 5 6 7 1 2 3 4 –&gt; 结果<br>Java<br><code>public class Solution {</code><br>    <code>public void rotate(int[] nums, int k) {</code><br>        <code>k %= nums.length;</code><br>        <code>reverse(nums, 0, nums.length - 1);</code><br>        <code>reverse(nums, 0, k - 1);</code><br>        <code>reverse(nums, k, nums.length - 1);</code><br>    <code>}</code><br>    <code>public void reverse(int[] nums, int start, int end) {</code><br>        <code>while (start &lt; end) {</code><br>            <code>int temp = nums[start];</code><br>            <code>nums[start] = nums[end];</code><br>            <code>nums[end] = temp;</code><br>            <code>start++;</code><br>            <code>end--;</code><br>        <code>}</code><br>    <code>}</code><br><code>}</code><br>复杂度分析</p>\n<p>时间复杂度：O(n) 。 n 个元素被反转了总共 3 次。<br>空间复杂度：O(1) 。 没有使用额外的空间。</p>\n"},{"_content":"# ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题\n\n1：添加一个launchscreen文件\n\n拖动一个imageview到launchscreen\n\n设置imageviewcontmode为aspect to fill\n\n![截屏2020-04-14 下午3.25.35](ios%E5%90%AF%E5%8A%A8%E9%A1%B5LaunchScreen%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%8F%EF%BC%8C%E5%A4%84%E7%90%86%E5%90%AF%E5%8A%A8%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E4%B8%8B%E6%96%B9%E9%97%AE%E9%A2%98.assets/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.35.png)\n\n设置约束距离四边均为0，且space to superview\n\n![截屏2020-04-14 下午3.25.46](ios%E5%90%AF%E5%8A%A8%E9%A1%B5LaunchScreen%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%8F%EF%BC%8C%E5%A4%84%E7%90%86%E5%90%AF%E5%8A%A8%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E4%B8%8B%E6%96%B9%E9%97%AE%E9%A2%98.assets/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.46.png)\n\n![截屏2020-04-14 下午3.25.49](ios%E5%90%AF%E5%8A%A8%E9%A1%B5LaunchScreen%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%8F%EF%BC%8C%E5%A4%84%E7%90%86%E5%90%AF%E5%8A%A8%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E4%B8%8B%E6%96%B9%E9%97%AE%E9%A2%98.assets/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.49.png)\n\n基本就可以了\n\n\n\n\n\n参考：\n\nhttps://www.jianshu.com/p/f8c9e6069d09","source":"_posts/ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题.md","raw":"# ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题\n\n1：添加一个launchscreen文件\n\n拖动一个imageview到launchscreen\n\n设置imageviewcontmode为aspect to fill\n\n![截屏2020-04-14 下午3.25.35](ios%E5%90%AF%E5%8A%A8%E9%A1%B5LaunchScreen%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%8F%EF%BC%8C%E5%A4%84%E7%90%86%E5%90%AF%E5%8A%A8%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E4%B8%8B%E6%96%B9%E9%97%AE%E9%A2%98.assets/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.35.png)\n\n设置约束距离四边均为0，且space to superview\n\n![截屏2020-04-14 下午3.25.46](ios%E5%90%AF%E5%8A%A8%E9%A1%B5LaunchScreen%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%8F%EF%BC%8C%E5%A4%84%E7%90%86%E5%90%AF%E5%8A%A8%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E4%B8%8B%E6%96%B9%E9%97%AE%E9%A2%98.assets/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.46.png)\n\n![截屏2020-04-14 下午3.25.49](ios%E5%90%AF%E5%8A%A8%E9%A1%B5LaunchScreen%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%8F%EF%BC%8C%E5%A4%84%E7%90%86%E5%90%AF%E5%8A%A8%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E4%B8%8B%E6%96%B9%E9%97%AE%E9%A2%98.assets/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.49.png)\n\n基本就可以了\n\n\n\n\n\n参考：\n\nhttps://www.jianshu.com/p/f8c9e6069d09","slug":"ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题","published":1,"date":"2020-04-14T07:23:57.406Z","updated":"2020-04-14T09:05:14.950Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5ul000hnfayp2b2lfad","content":"<h1 id=\"ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题\"><a href=\"#ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题\" class=\"headerlink\" title=\"ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题\"></a>ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题</h1><p>1：添加一个launchscreen文件</p>\n<p>拖动一个imageview到launchscreen</p>\n<p>设置imageviewcontmode为aspect to fill</p>\n<p><img src=\"//wizhiai.github.io/2020/04/14/ios-qi-dong-ye-launchscreen-she-zhi-quan-ping-chu-li-qi-dong-ye-xian-shi-zai-zhuang-tai-lan-de-xia-fang-wen-ti/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.35.png\" alt=\"截屏2020-04-14 下午3.25.35\"></p>\n<p>设置约束距离四边均为0，且space to superview</p>\n<p><img src=\"//wizhiai.github.io/2020/04/14/ios-qi-dong-ye-launchscreen-she-zhi-quan-ping-chu-li-qi-dong-ye-xian-shi-zai-zhuang-tai-lan-de-xia-fang-wen-ti/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.46.png\" alt=\"截屏2020-04-14 下午3.25.46\"></p>\n<p><img src=\"//wizhiai.github.io/2020/04/14/ios-qi-dong-ye-launchscreen-she-zhi-quan-ping-chu-li-qi-dong-ye-xian-shi-zai-zhuang-tai-lan-de-xia-fang-wen-ti/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.49.png\" alt=\"截屏2020-04-14 下午3.25.49\"></p>\n<p>基本就可以了</p>\n<p>参考：</p>\n<p><a href=\"https://www.jianshu.com/p/f8c9e6069d09\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/f8c9e6069d09</a></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题\"><a href=\"#ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题\" class=\"headerlink\" title=\"ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题\"></a>ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题</h1><p>1：添加一个launchscreen文件</p>\n<p>拖动一个imageview到launchscreen</p>\n<p>设置imageviewcontmode为aspect to fill</p>\n<p><img src=\"//wizhiai.github.io/2020/04/14/ios-qi-dong-ye-launchscreen-she-zhi-quan-ping-chu-li-qi-dong-ye-xian-shi-zai-zhuang-tai-lan-de-xia-fang-wen-ti/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.35.png\" alt=\"截屏2020-04-14 下午3.25.35\"></p>\n<p>设置约束距离四边均为0，且space to superview</p>\n<p><img src=\"//wizhiai.github.io/2020/04/14/ios-qi-dong-ye-launchscreen-she-zhi-quan-ping-chu-li-qi-dong-ye-xian-shi-zai-zhuang-tai-lan-de-xia-fang-wen-ti/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.46.png\" alt=\"截屏2020-04-14 下午3.25.46\"></p>\n<p><img src=\"//wizhiai.github.io/2020/04/14/ios-qi-dong-ye-launchscreen-she-zhi-quan-ping-chu-li-qi-dong-ye-xian-shi-zai-zhuang-tai-lan-de-xia-fang-wen-ti/%E6%88%AA%E5%B1%8F2020-04-14%20%E4%B8%8B%E5%8D%883.25.49.png\" alt=\"截屏2020-04-14 下午3.25.49\"></p>\n<p>基本就可以了</p>\n<p>参考：</p>\n<p><a href=\"https://www.jianshu.com/p/f8c9e6069d09\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/f8c9e6069d09</a></p>\n"},{"title":"解决google搜索引擎被劫持：Unable to change default search engine in Chrome with search6188182-a.akamaihd.net' ","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-28T09:15:36.000Z","password":null,"summary":null,"_content":"\n\n\n\n\n如题：![截屏2020-04-28 下午5.37.41](%E8%A7%A3%E5%86%B3google%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%A2%AB%E5%8A%AB%E6%8C%81%EF%BC%9AUnable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net/%E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.41-8066702.png)\n\n解决方法：\n\n![截屏2020-04-28 下午5.37.49](%E8%A7%A3%E5%86%B3google%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%A2%AB%E5%8A%AB%E6%8C%81%EF%BC%9AUnable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net.assets/%E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.49.png)\n![image-20200428182128636](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5.assets/image-20200428182128636.png)\n\n打开Mac，系统偏好设置，描叙文件（配置文件），然后删除关于akamaihd.net的就可以了，我的是两个。记得重启google，然后再去删除就可以删除了\n","source":"_posts/解决google搜索引擎被劫持：Unable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net.md","raw":"---\ntitle: >-\n  解决google搜索引擎被劫持：Unable to change default search engine in Chrome with\n  search6188182-a.akamaihd.net' \ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-28 17:15:36\npassword:\nsummary:\ntags:\ncategories:\n---\n\n\n\n\n\n如题：![截屏2020-04-28 下午5.37.41](%E8%A7%A3%E5%86%B3google%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%A2%AB%E5%8A%AB%E6%8C%81%EF%BC%9AUnable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net/%E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.41-8066702.png)\n\n解决方法：\n\n![截屏2020-04-28 下午5.37.49](%E8%A7%A3%E5%86%B3google%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%A2%AB%E5%8A%AB%E6%8C%81%EF%BC%9AUnable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net.assets/%E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.49.png)\n![image-20200428182128636](hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E7%BD%91%E9%A1%B5%E9%A6%96%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%B5%8F%E8%A7%88%EF%BC%8C%E7%BB%93%E5%90%88typora%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5.assets/image-20200428182128636.png)\n\n打开Mac，系统偏好设置，描叙文件（配置文件），然后删除关于akamaihd.net的就可以了，我的是两个。记得重启google，然后再去删除就可以删除了\n","slug":"解决google搜索引擎被劫持：Unable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net","published":1,"updated":"2020-04-28T10:29:18.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5uo000knfay1qemaq21","content":"<p>如题：<img src=\"//wizhiai.github.io/2020/04/28/jie-jue-google-sou-suo-yin-qing-bei-jie-chi-unable-to-change-default-search-engine-in-chrome-with-search6188182-a-akamaihd-net/%E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.41-8066702.png\" alt=\"截屏2020-04-28 下午5.37.41\"></p>\n<p>解决方法：</p>\n<p><img src=\"//wizhiai.github.io/2020/04/28/jie-jue-google-sou-suo-yin-qing-bei-jie-chi-unable-to-change-default-search-engine-in-chrome-with-search6188182-a-akamaihd-net/%E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.49.png\" alt=\"截屏2020-04-28 下午5.37.49\"><br><img src=\"//wizhiai.github.io/2020/04/28/jie-jue-google-sou-suo-yin-qing-bei-jie-chi-unable-to-change-default-search-engine-in-chrome-with-search6188182-a-akamaihd-net/image-20200428182128636.png\" alt=\"image-20200428182128636\"></p>\n<p>打开Mac，系统偏好设置，描叙文件（配置文件），然后删除关于akamaihd.net的就可以了，我的是两个。记得重启google，然后再去删除就可以删除了</p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>如题：<img src=\"//wizhiai.github.io/2020/04/28/jie-jue-google-sou-suo-yin-qing-bei-jie-chi-unable-to-change-default-search-engine-in-chrome-with-search6188182-a-akamaihd-net/%E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.41-8066702.png\" alt=\"截屏2020-04-28 下午5.37.41\"></p>\n<p>解决方法：</p>\n<p><img src=\"//wizhiai.github.io/2020/04/28/jie-jue-google-sou-suo-yin-qing-bei-jie-chi-unable-to-change-default-search-engine-in-chrome-with-search6188182-a-akamaihd-net/%E6%88%AA%E5%B1%8F2020-04-28%20%E4%B8%8B%E5%8D%885.37.49.png\" alt=\"截屏2020-04-28 下午5.37.49\"><br><img src=\"//wizhiai.github.io/2020/04/28/jie-jue-google-sou-suo-yin-qing-bei-jie-chi-unable-to-change-default-search-engine-in-chrome-with-search6188182-a-akamaihd-net/image-20200428182128636.png\" alt=\"image-20200428182128636\"></p>\n<p>打开Mac，系统偏好设置，描叙文件（配置文件），然后删除关于akamaihd.net的就可以了，我的是两个。记得重启google，然后再去删除就可以删除了</p>\n"},{"title":"hexo use","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-21T00:50:30.000Z","password":null,"summary":null,"_content":"\n\n\n1:创建新文章：hexo new post \"article title\"\n\n编写完markdown文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到github上。这时打开你的github.io主页就能看到发布的文章啦。\n\n# 绑定域名","source":"_posts/hexo-use.md","raw":"---\ntitle: hexo use\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-21 08:50:30\npassword:\nsummary:\ntags:\ncategories:\n\n---\n\n\n\n1:创建新文章：hexo new post \"article title\"\n\n编写完markdown文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到github上。这时打开你的github.io主页就能看到发布的文章啦。\n\n# 绑定域名","slug":"hexo-use","published":1,"updated":"2020-04-21T01:40:30.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbacy5uq000lnfaykf1dnih9","content":"<p>1:创建新文章：hexo new post “article title”</p>\n<p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1>","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>1:创建新文章：hexo new post “article title”</p>\n<p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1>"}],"PostAsset":[{"_id":"source/_posts/KVO/171a512df9918245.jpg","slug":"171a512df9918245.jpg","post":"ckbacy5t80006nfay3ponvr9l","modified":1,"renderable":0},{"_id":"source/_posts/click-the-area-around-the-prompt-view-to-hide-the-promot-view/截屏2020-04-23 下午5.26.47-7634116.png","post":"ckbacy5t10004nfayxl4y9nqk","slug":"截屏2020-04-23 下午5.26.47-7634116.png","modified":1,"renderable":1},{"_id":"source/_posts/click-the-area-around-the-prompt-view-to-hide-the-promot-view/截屏2020-04-23 下午5.26.47.png","post":"ckbacy5t10004nfayxl4y9nqk","slug":"截屏2020-04-23 下午5.26.47.png","modified":1,"renderable":1},{"_id":"source/_posts/sort-algorithms/1.png","post":"ckbacy5ub0007nfayz5vztbrq","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/hexo添加图片，网页首页正常浏览，结合typora，实现复制图片，自动插入/image-20200428182128636.png","post":"ckbacy5ug000dnfay8hw25vc2","slug":"image-20200428182128636.png","modified":1,"renderable":1},{"_id":"source/_posts/ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题/截屏2020-04-14 下午3.25.35.png","post":"ckbacy5ul000hnfayp2b2lfad","slug":"截屏2020-04-14 下午3.25.35.png","modified":1,"renderable":1},{"_id":"source/_posts/ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题/截屏2020-04-14 下午3.25.46.png","post":"ckbacy5ul000hnfayp2b2lfad","slug":"截屏2020-04-14 下午3.25.46.png","modified":1,"renderable":1},{"_id":"source/_posts/ios启动页LaunchScreen设置全屏，处理启动页显示在状态栏的下方问题/截屏2020-04-14 下午3.25.49.png","post":"ckbacy5ul000hnfayp2b2lfad","slug":"截屏2020-04-14 下午3.25.49.png","modified":1,"renderable":1},{"_id":"source/_posts/解决google搜索引擎被劫持：Unable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net/截屏2020-04-28 下午5.37.41-8066702.png","post":"ckbacy5uo000knfay1qemaq21","slug":"截屏2020-04-28 下午5.37.41-8066702.png","modified":1,"renderable":1},{"_id":"source/_posts/解决google搜索引擎被劫持：Unable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net/截屏2020-04-28 下午5.37.41.png","post":"ckbacy5uo000knfay1qemaq21","slug":"截屏2020-04-28 下午5.37.41.png","modified":1,"renderable":1},{"_id":"source/_posts/解决google搜索引擎被劫持：Unable-to-change-default-search-engine-in-Chrome-with-search6188182-a-akamaihd-net/截屏2020-04-28 下午5.37.49.png","post":"ckbacy5uo000knfay1qemaq21","slug":"截屏2020-04-28 下午5.37.49.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckbacy5ub0007nfayz5vztbrq","category_id":"ckbacy5ue000bnfayslrcvtq9","_id":"ckbacy5ur000mnfay2xsev1k5"}],"PostTag":[{"post_id":"ckbacy5ub0007nfayz5vztbrq","tag_id":"ckbacy5ug000cnfay2537bof5","_id":"ckbacy5ur000nnfay1btfj1s2"},{"post_id":"ckbacy5ub0007nfayz5vztbrq","tag_id":"ckbacy5um000infay7zxg8g7t","_id":"ckbacy5us000onfaytw4rg5nv"}],"Tag":[{"name":"leetcode","_id":"ckbacy5ug000cnfay2537bof5"},{"name":"算法","_id":"ckbacy5um000infay7zxg8g7t"}]}}